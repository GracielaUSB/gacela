
include hola

program Program.bin begin

type Dicc(T0, T1) implements Diccionario(T0, T1) begin
  var   clave      : array [MAX] of T0;
  var   valor      : array [MAX] of T1;
  var   tam        : int;

  {repinv MAX > 0 ∧ 0 ≤ tam ∧ tam ≤ MAX ∧
    (% ∀ i : int | 0 ≤ i ∧ i < tam
      | (% ∀ j : int | 0 ≤ j ∧ j < tam ∧ i != j | clave[i] != clave[j] %)
    %)
  repinv}

  {coupinv true coupinv}

  where { 
    tabla := func({i : int | 0 ≤ i ∧ i < tam | (clave[i], valor[i])});
    conoc := domain(tabla)
  }
  
  proc copiarClaveValor ( in d       : Dicc(T0,T1)
                        , const m    : int
                        , out clave' : array[m] of T0
                        , out valor' : array[m] of T1)
    {pre true pre}
    {post (% forall i : int | 0 ≤ i ∧ i < d.tam | d.clave[i] == clave'[i] 
                                                ∧ d.valor[i] == valor'[i]  %) post}
    ⟦ var i : int
    ; i := 0
    ; {inv 0 ≤ i ∧ i ≤ d.tam inv}
      {bound d.tam - i bound} 
      do i < d.tam -> clave'[i] := d.clave[i]
                    ; valor'[i] := d.valor[i]
                    ; i := i + 1

      od 
    ⟧


  proc agregar (inout d : Dicc(T0,T1), in c : T0, in v : T1)
    var tam' := d.tam : int;  
    var clave'        : array[d.MAX] of T0;
    var valor'        : array[d.MAX] of T1;

    {pre ¬(% ∃ i : int | 0 ≤ i ∧ i < d.tam | d.clave[i] == c %) 
        ∧ d.tam < d.MAX 
    pre}

    {post d.tam == tam' + 1 
        ∧ d.clave[tam'] == c ∧  d.valor[tam'] == v 
        ∧ (% forall i : int | 0 ≤ i ∧ i < tam' | d.clave[i] == clave'[i]
                                               ∧ d.valor[i] == valor'[i] %) 
    post}
    
    ⟦ var i : int
    ; copiarClaveValor(d, d.MAX, clave', valor')
    ; i := 0
    
    ; if d.tam == 0 -> d.clave[d.tam], d.valor[d.tam] := c, v
                     ; d.tam := d.tam + 1
      [] otherwise 
          -> {inv 0 ≤ i ∧ i ≤ d.tam inv}
             {bound d.tam - i bound} 
             do i < d.tam -> if d.clave[i] == c -> i := d.tam
                             [] i == d.tam - 1  -> d.clave[d.tam], d.valor[d.tam] := c, v
                                                 ; d.tam := d.tam + 1
                                                 ; i := d.tam
                             [] otherwise       -> i := i + 1
                             fi
             od
      fi
    ⟧

  proc eliminar (inout d : Dicc(T0,T1), in c : T0)
    var tam' := d.tam : int;
    var k             : int;
    var clave'        : array[d.MAX] of T0;
    var valor'        : array[d.MAX] of T1;

    {pre (% ∃ i : int | 0 ≤ i ∧ i < d.tam | d.clave[i] == c %) pre}
    {post d.tam == tam' - 1
         ∧ (% ∃ i : int | 0 ≤ i ∧ i < tam' | 
               clave'[i] == c
            ∧ d.clave[i] == clave'[tam'-1]
            ∧ d.valor[i] == valor'[tam'-1]
            ∧ (% forall j : int | 0 ≤ j ∧ j < d.tam-1 ∧ j != i |
                     d.clave[j] == clave'[j] 
                   ∧ d.valor[j] == valor'[j] %) %) post}
    ⟦ var i := 0 : int
    ; copiarClaveValor(d, d.MAX, clave', valor')

    ; {inv 0 ≤ i ∧ i ≤ d.tam inv}
      {bound d.tam - i  bound} 
      do i < d.tam -> if d.clave[i] != c -> i := i + 1
                      [] d.clave[i] == c -> d.clave[i] := d.clave[d.tam - 1]
                                          ; d.valor[i] := d.valor[d.tam - 1]
                                          ; i := d.tam
                      fi
      od
    ; writeln(d.tam)
    ; d.tam := d.tam - 1
    ; writeln(d.tam)
    ⟧

  proc buscar ( in d : Dicc(T0,T1), in c : T0 , out v : T1 )
    {pre  (% ∃ i : int | 0 ≤ i ∧ i < d.tam | d.clave[i] == c %) pre}
    {post (% ∃ i : int | 0 ≤ i ∧ i < d.tam | d.clave[i] == c ∧ d.valor[i] == v %) post}
    ⟦ var i : int
    ; i := 0
      
    ; {inv 0 ≤ i ∧ i ≤ d.tam inv}
      {bound d.tam - i bound} 
      do i < d.tam -> if d.clave[i] != c -> i := i+1
                      [] otherwise       -> v, i := d.valor[i], d.tam
                      fi
      od
    ⟧

  proc existe (in d : Dicc(T0,T1), in c : T0, out e : boolean)
    {pre true pre}
    {post e ≡ (% ∃ i : int | 0 ≤ i ∧ i < d.tam | d.clave[i] == c %) post}
    ⟦ var i : int
    ; i := 0
    ; e := false
    ; {inv 0 ≤ i ∧ i ≤ d.tam inv}
      {bound d.tam - i bound} 
      do i < d.tam -> if d.clave[i] != c -> i := i+1
                      [] otherwise       -> e, i := true, d.tam
                      fi
      od
    ⟧
end

func constante (i : int) ->  int
  {pre  true  pre}
  {post true post}
  ⟦
    1
  ⟧

func rec ( i : int) -> int
  {pre  true  pre}
  {post true post}
  {bound i bound}
  ⟦ if i >= constante(i) -> rec(i-1)*2
     [] otherwise -> 1
     fi
  ⟧

main
  ⟦ var n, k := 0,0 : int
  ; var v, c : char
  ; var arr : array[10] of (int*)
  ; var d : Dicc(int, char)
  ; writeln("Debido a que el programa debe terminar,")
  ; writeln("este prompt se emitira solo un maximo de 100 veces")
  ; {inv   true    inv}
    {bound 100-n bound}
    do n < 100 
      -> n := n + 1
       ; writeln("(Intento: ", n, " de 100)")
       ; writeln( "Introduzca una letra:")
       ; writeln("\t(T) para Terminar,")
       ; writeln("\t(I) para Insertar una clave y un valor al Diccionario,")
       ; writeln("\t(E) para Eliminar un elmento del Diccionario")
       ; writeln("\t(B) para Buscar un el valor de un clave, o")
       ; writeln("\t(M) para Mostrar el Diccionario.")
       ; write("> ")
       ; read(c)
       ; if c == 'T' \/ c == 't' -> writeln("Adios :)"); n := 100
         [] c == 'I' \/ c == 'i'
          -> write("Escriba la clave (entero): ")
           ; read(k)
           ; write("Escriba el valor (caracter): ")
           ; read(v)
           ; agregar ( d, k, v )
         [] c == 'E' \/ c == 'e'
          -> write("Escriba la clave (entero): ")
           ; read(k)
           ; eliminar (d, k)
         [] c == 'B' \/ c == 'b'
          -> write("Escriba la clave a buscar: ")
           ; read(k)
           ; buscar (d,k,v)
           ; writeln("\nEl valor de la clave ", k, " es: ", v, "\n")

         [] c == 'M' \/ c == 'm' -> writeln("No se puede mostrar el diccionario :( Porfavor implemente el procedimiento para mostrarlo")

         [] otherwise -> writeln("Has perdido un intento :(")
         fi
       
    od
  ⟧
end