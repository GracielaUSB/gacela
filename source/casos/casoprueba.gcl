program main begin

<<<<<<< HEAD
=======
  proc sumar : (inout m : int, in n : int) 
  begin
      var ss : int; 
      {pre m >= 0 /\ n >= 0 pre}  
      |[
           ss := 548;
           writeln(m)
      ]|  
      {post m <= m + n post}
  end


  func restar : (m : int, n : int) -> int
  begin
      m - n
  end

>>>>>>> df4e61a91ec3bb084a5bf660064a5aebebf2c401
  |[
    var i := 0 : int;
    var j := 0 : int;
    const y := 5  : int;
    var   z := 10 : int;
    var arrglo : array [y] of array [z] of int;

    {inv true inv}
    {bound true bound}
    do (i < y) ->
    |[  
    j := 0;
    {inv true inv}
    {bound true bound}
      do (j < z) ->
        |[
            arrglo[i][j] := i + j;
            j := j + 1
        ]|
      od;
      i := i + 1
    ]|
    od;

<<<<<<< HEAD
    i := 0;
    j := 0;
=======
    if x < y  -> |[ x := x + 1 ; sumar(454,5) ; x := x + 1 ; writeln(restar(5,3)+1) ]|
    [] x >= y -> skip
    fi
>>>>>>> df4e61a91ec3bb084a5bf660064a5aebebf2c401

    {inv true inv}
    {bound true bound}
    do (i < y) ->
    |[  
    j := 0;
    {inv true inv}
    {bound true bound}
      do (j < z) ->
        |[
            writeln(arrglo[i][j]);
            j := j + 1
        ]|
      od;

      i := i + 1
    ]|
    od
  ]|
end
