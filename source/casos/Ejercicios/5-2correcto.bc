; ModuleID = 'main'

@0 = constant [41 x i16] [i16 78, i16 117, i16 109, i16 101, i16 114, i16 111, i16 32, i16 100, i16 101, i16 32, i16 70, i16 105, i16 98, i16 111, i16 110, i16 97, i16 99, i16 99, i16 105, i16 44, i16 32, i16 105, i16 110, i16 103, i16 114, i16 101, i16 115, i16 101, i16 32, i16 117, i16 110, i16 32, i16 110, i16 117, i16 109, i16 101, i16 114, i16 111, i16 58, i16 32, i16 0]
@1 = constant [18 x i16] [i16 69, i16 108, i16 32, i16 114, i16 101, i16 115, i16 117, i16 108, i16 116, i16 97, i16 100, i16 111, i16 32, i16 101, i16 115, i16 58, i16 32, i16 0]

declare i32 @_random()

declare void @_abort(i32, i32, i32)

declare void @_writeLnInt(i32)

declare void @_writeInt(i32)

declare i32 @_min(i32, i32)

declare i32 @_max(i32, i32)

declare void @_writeLnChar(i9)

declare void @_writeChar(i9)

declare void @_writeLnBool(i1)

declare void @_writeBool(i1)

declare void @_writeLnDouble(double)

declare void @_writeDouble(double)

; Function Attrs: nounwind readonly
declare double @llvm.sqrt.f64(double) #0

; Function Attrs: nounwind readonly
declare double @llvm.fabs.f64(double) #0

declare double @_minF(double, double)

declare double @_maxF(double, double)

; Function Attrs: nounwind readonly
declare double @llvm.pow.f64(double, double) #0

declare i32 @_writeLnString(i16* nocapture)

declare i32 @_writeString(i16* nocapture)

; Function Attrs: nounwind readnone
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #1

; Function Attrs: nounwind readnone
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #1

; Function Attrs: nounwind readnone
declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32) #1

declare i32 @_readIntStd()

declare i9 @_readCharStd()

declare double @_readDoubleStd()

declare i8* @_openFile(i8*)

declare i32 @_readFileInt(i8*)

declare i9 @_readFileChar(i8*)

declare double @_readFileDouble(i8*)

declare void @_closeFile(i8*)

define void @fib(i32* %x) {
  %_x = alloca i32
  store i32 0, i32* %_x
  %a = alloca i32
  store i32 0, i32* %a
  %b = alloca i32
  store i32 0, i32* %b
  %n = alloca i32
  store i32 0, i32* %n
  %y = alloca i32
  store i32 0, i32* %y
  %N = alloca i32
  store i32 0, i32* %N
  %i = alloca i32
  store i32 0, i32* %i
  %1 = call i32 @_readIntStd()
  store i32 %1, i32* %N
  %2 = load i32* %N
  %3 = icmp sge i32 %2, 0
  %_resPrefib = alloca i1
  store i1 %3, i1* %_resPrefib
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  call void @_abort(i32 3, i32 13, i32 9)
  br label %5

; <label>:5                                       ; preds = %4, %0
  %__a = alloca i32
  store i32 0, i32* %__a
  %__b = alloca i32
  store i32 1, i32* %__b
  %__x = alloca i32
  store i32 0, i32* %__x
  %__y = alloca i32
  store i32 1, i32* %__y
  %6 = load i32* %N
  %__n = alloca i32
  store i32 %6, i32* %__n
  %7 = load i32* %N
  %8 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %7, i32 2)
  %9 = extractvalue { i32, i1 } %8, 1
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %5
  call void @_abort(i32 12, i32 14, i32 49)
  unreachable

; <label>:11                                      ; preds = %5
  %12 = extractvalue { i32, i1 } %8, 0
  %__i = alloca i32
  store i32 %12, i32* %__i
  %13 = load i32* %__a
  store i32 %13, i32* %a
  %14 = load i32* %__b
  store i32 %14, i32* %b
  %15 = load i32* %__x
  store i32 %15, i32* %_x
  %16 = load i32* %__y
  store i32 %16, i32* %y
  %17 = load i32* %__n
  store i32 %17, i32* %n
  %18 = load i32* %__i
  store i32 %18, i32* %i
  %"49" = alloca i32
  store i32 2147483647, i32* %"49"
  br label %19

; <label>:19                                      ; preds = %182, %11
  br i1 true, label %21, label %20

; <label>:20                                      ; preds = %19
  call void @_abort(i32 6, i32 17, i32 13)
  br label %21

; <label>:21                                      ; preds = %20, %19
  %22 = load i32* %i
  %23 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 1)
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %21
  call void @_abort(i32 12, i32 17, i32 21)
  unreachable

; <label>:26                                      ; preds = %21
  %27 = extractvalue { i32, i1 } %23, 0
  %28 = load i32* %"49"
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %32

; <label>:30                                      ; preds = %26
  %31 = icmp sle i32 %27, 0
  store i32 %27, i32* %"49"
  br i1 %31, label %33, label %34

; <label>:32                                      ; preds = %26
  call void @_abort(i32 7, i32 19, i32 13)
  unreachable

; <label>:33                                      ; preds = %30
  call void @_abort(i32 8, i32 19, i32 13)
  unreachable

; <label>:34                                      ; preds = %30
  %35 = load i32* %n
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %183

; <label>:37                                      ; preds = %34
  %38 = load i32* %n
  br i1 false, label %39, label %40

; <label>:39                                      ; preds = %37
  call void @_abort(i32 9, i32 21, i32 23)
  unreachable

; <label>:40                                      ; preds = %37
  %41 = urem i32 %38, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %108

; <label>:43                                      ; preds = %40
  %44 = load i32* %a
  %45 = load i32* %a
  %46 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %44, i32 %45)
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %48, label %49

; <label>:48                                      ; preds = %43
  call void @_abort(i32 12, i32 23, i32 30)
  unreachable

; <label>:49                                      ; preds = %43
  %50 = extractvalue { i32, i1 } %46, 0
  %51 = load i32* %b
  %52 = load i32* %b
  %53 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %51, i32 %52)
  %54 = extractvalue { i32, i1 } %53, 1
  br i1 %54, label %55, label %56

; <label>:55                                      ; preds = %49
  call void @_abort(i32 12, i32 23, i32 36)
  unreachable

; <label>:56                                      ; preds = %49
  %57 = extractvalue { i32, i1 } %53, 0
  %58 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %50, i32 %57)
  %59 = extractvalue { i32, i1 } %58, 1
  br i1 %59, label %60, label %61

; <label>:60                                      ; preds = %56
  call void @_abort(i32 12, i32 23, i32 33)
  unreachable

; <label>:61                                      ; preds = %56
  %62 = extractvalue { i32, i1 } %58, 0
  store i32 %62, i32* %__a
  %63 = load i32* %a
  %64 = load i32* %b
  %65 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %63, i32 %64)
  %66 = extractvalue { i32, i1 } %65, 1
  br i1 %66, label %67, label %68

; <label>:67                                      ; preds = %61
  call void @_abort(i32 12, i32 23, i32 41)
  unreachable

; <label>:68                                      ; preds = %61
  %69 = extractvalue { i32, i1 } %65, 0
  %70 = load i32* %b
  %71 = load i32* %a
  %72 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %70, i32 %71)
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %74, label %75

; <label>:74                                      ; preds = %68
  call void @_abort(i32 12, i32 23, i32 47)
  unreachable

; <label>:75                                      ; preds = %68
  %76 = extractvalue { i32, i1 } %72, 0
  %77 = load i32* %b
  %78 = load i32* %b
  %79 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %77, i32 %78)
  %80 = extractvalue { i32, i1 } %79, 1
  br i1 %80, label %81, label %82

; <label>:81                                      ; preds = %75
  call void @_abort(i32 12, i32 23, i32 53)
  unreachable

; <label>:82                                      ; preds = %75
  %83 = extractvalue { i32, i1 } %79, 0
  %84 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %76, i32 %83)
  %85 = extractvalue { i32, i1 } %84, 1
  br i1 %85, label %86, label %87

; <label>:86                                      ; preds = %82
  call void @_abort(i32 12, i32 23, i32 50)
  unreachable

; <label>:87                                      ; preds = %82
  %88 = extractvalue { i32, i1 } %84, 0
  %89 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %69, i32 %88)
  %90 = extractvalue { i32, i1 } %89, 1
  br i1 %90, label %91, label %92

; <label>:91                                      ; preds = %87
  call void @_abort(i32 12, i32 23, i32 44)
  unreachable

; <label>:92                                      ; preds = %87
  %93 = extractvalue { i32, i1 } %89, 0
  store i32 %93, i32* %__b
  %94 = load i32* %__a
  store i32 %94, i32* %a
  %95 = load i32* %__b
  store i32 %95, i32* %b
  %96 = load i32* %n
  br i1 false, label %97, label %98

; <label>:97                                      ; preds = %92
  call void @_abort(i32 9, i32 24, i32 30)
  unreachable

; <label>:98                                      ; preds = %92
  %99 = sdiv exact i32 %96, 2
  store i32 %99, i32* %__n
  %100 = load i32* %i
  %101 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %100, i32 1)
  %102 = extractvalue { i32, i1 } %101, 1
  br i1 %102, label %103, label %104

; <label>:103                                     ; preds = %98
  call void @_abort(i32 12, i32 24, i32 35)
  unreachable

; <label>:104                                     ; preds = %98
  %105 = extractvalue { i32, i1 } %101, 0
  store i32 %105, i32* %__i
  %106 = load i32* %__n
  store i32 %106, i32* %n
  %107 = load i32* %__i
  store i32 %107, i32* %i
  br label %182

; <label>:108                                     ; preds = %40
  %109 = load i32* %n
  br i1 false, label %110, label %111

; <label>:110                                     ; preds = %108
  call void @_abort(i32 9, i32 26, i32 23)
  unreachable

; <label>:111                                     ; preds = %108
  %112 = urem i32 %109, 2
  %113 = icmp eq i32 %112, 1
  br i1 %113, label %114, label %181

; <label>:114                                     ; preds = %111
  %115 = load i32* %a
  %116 = load i32* %_x
  %117 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %115, i32 %116)
  %118 = extractvalue { i32, i1 } %117, 1
  br i1 %118, label %119, label %120

; <label>:119                                     ; preds = %114
  call void @_abort(i32 12, i32 28, i32 30)
  unreachable

; <label>:120                                     ; preds = %114
  %121 = extractvalue { i32, i1 } %117, 0
  %122 = load i32* %b
  %123 = load i32* %y
  %124 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %122, i32 %123)
  %125 = extractvalue { i32, i1 } %124, 1
  br i1 %125, label %126, label %127

; <label>:126                                     ; preds = %120
  call void @_abort(i32 12, i32 28, i32 36)
  unreachable

; <label>:127                                     ; preds = %120
  %128 = extractvalue { i32, i1 } %124, 0
  %129 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %121, i32 %128)
  %130 = extractvalue { i32, i1 } %129, 1
  br i1 %130, label %131, label %132

; <label>:131                                     ; preds = %127
  call void @_abort(i32 12, i32 28, i32 33)
  unreachable

; <label>:132                                     ; preds = %127
  %133 = extractvalue { i32, i1 } %129, 0
  store i32 %133, i32* %__x
  %134 = load i32* %b
  %135 = load i32* %_x
  %136 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %134, i32 %135)
  %137 = extractvalue { i32, i1 } %136, 1
  br i1 %137, label %138, label %139

; <label>:138                                     ; preds = %132
  call void @_abort(i32 12, i32 28, i32 41)
  unreachable

; <label>:139                                     ; preds = %132
  %140 = extractvalue { i32, i1 } %136, 0
  %141 = load i32* %a
  %142 = load i32* %y
  %143 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %141, i32 %142)
  %144 = extractvalue { i32, i1 } %143, 1
  br i1 %144, label %145, label %146

; <label>:145                                     ; preds = %139
  call void @_abort(i32 12, i32 28, i32 47)
  unreachable

; <label>:146                                     ; preds = %139
  %147 = extractvalue { i32, i1 } %143, 0
  %148 = load i32* %b
  %149 = load i32* %y
  %150 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %148, i32 %149)
  %151 = extractvalue { i32, i1 } %150, 1
  br i1 %151, label %152, label %153

; <label>:152                                     ; preds = %146
  call void @_abort(i32 12, i32 28, i32 53)
  unreachable

; <label>:153                                     ; preds = %146
  %154 = extractvalue { i32, i1 } %150, 0
  %155 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %147, i32 %154)
  %156 = extractvalue { i32, i1 } %155, 1
  br i1 %156, label %157, label %158

; <label>:157                                     ; preds = %153
  call void @_abort(i32 12, i32 28, i32 50)
  unreachable

; <label>:158                                     ; preds = %153
  %159 = extractvalue { i32, i1 } %155, 0
  %160 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %140, i32 %159)
  %161 = extractvalue { i32, i1 } %160, 1
  br i1 %161, label %162, label %163

; <label>:162                                     ; preds = %158
  call void @_abort(i32 12, i32 28, i32 44)
  unreachable

; <label>:163                                     ; preds = %158
  %164 = extractvalue { i32, i1 } %160, 0
  store i32 %164, i32* %__y
  %165 = load i32* %__x
  store i32 %165, i32* %_x
  %166 = load i32* %__y
  store i32 %166, i32* %y
  %167 = load i32* %n
  %168 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %167, i32 1)
  %169 = extractvalue { i32, i1 } %168, 1
  br i1 %169, label %170, label %171

; <label>:170                                     ; preds = %163
  call void @_abort(i32 12, i32 29, i32 30)
  unreachable

; <label>:171                                     ; preds = %163
  %172 = extractvalue { i32, i1 } %168, 0
  store i32 %172, i32* %__n
  %173 = load i32* %i
  %174 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %173, i32 1)
  %175 = extractvalue { i32, i1 } %174, 1
  br i1 %175, label %176, label %177

; <label>:176                                     ; preds = %171
  call void @_abort(i32 12, i32 29, i32 35)
  unreachable

; <label>:177                                     ; preds = %171
  %178 = extractvalue { i32, i1 } %174, 0
  store i32 %178, i32* %__i
  %179 = load i32* %__n
  store i32 %179, i32* %n
  %180 = load i32* %__i
  store i32 %180, i32* %i
  br label %182

; <label>:181                                     ; preds = %111
  call void @_abort(i32 1, i32 21, i32 17)
  unreachable

; <label>:182                                     ; preds = %177, %104
  br label %19

; <label>:183                                     ; preds = %34
  %184 = load i32* %_x
  store i32 %184, i32* %x
  %185 = load i32* %_x
  %186 = icmp sge i32 %185, 0
  %187 = load i1* %_resPrefib
  %188 = xor i1 %187, true
  %189 = or i1 %188, %186
  br i1 %189, label %191, label %190

; <label>:190                                     ; preds = %183
  call void @_abort(i32 4, i32 36, i32 5)
  br label %191

; <label>:191                                     ; preds = %190, %183
  ret void
}

define void @main() {
  %resultado = alloca i32
  store i32 0, i32* %resultado
  %1 = call i32 @_writeString(i16* getelementptr inbounds ([41 x i16]* @0, i64 0, i64 0))
  call void @fib(i32* %resultado)
  %2 = call i32 @_writeString(i16* getelementptr inbounds ([18 x i16]* @1, i64 0, i64 0))
  %3 = load i32* %resultado
  call void @_writeLnInt(i32 %3)
  ret void
}

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
