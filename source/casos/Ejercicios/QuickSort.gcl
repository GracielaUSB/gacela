program main begin

    proc swap : (ref h1: array [10] of int, in x: int, in y: int) 
    begin

        var aux : int;

        {pre x>=0 /\ y>=0 pre}  
        |[
            aux   := h1[x];
            h1[x] := h1[y];
            h1[y] := aux
        ]|
        {post true post}
    end
  
    proc ord : (in N: int, ref h: array [10] of int) 
    begin 
        var n, m: int;
        var r, w, b, z: int;
        var cot:=10000 : int;
        {pre N > 0 pre}  

        |[  
            n, m := 0, 1;

            {inv   true  inv} 
            {bound cot-1  bound}
            do (m < N) -> |[
                cot:= cot -1;

          	    n, m := n+1, m*2 
            ]|
            od;

            |[
                var x, y: array [10] of int;
                var k, p, q: int;
                
                k, p, q := 0, 0, N;

          	    {inv   true  inv} 
          	    {bound cot-1  bound}

          	    do ((k != 0) \/ (q-p >= 2)) ->
                |[
                    cot:= cot -1;

              	    if (q-p <= 1) ->
                    |[ 
              		    k := k-1;
              		    p, q := x[k], y[k]
              	    ]|

                    [] (q-p >= 2) -> 
              	    |[


              		      z := h[(p+q)/2];
              		      r, w, b := p, p, q;

		                {inv   true  inv} 
 	    	            {bound cot-1  bound}

              		    do (w != b) ->
                      |[
                        cot := cot -1;

		                    if (h[w] < z) -> 
                            |[
		                	    swap(h, r, w);
		                	    r, w := r+1, w+1
                            ]|

		                    [] (h[w] == z) -> w := w+1
		                  
                            [] (h[w] > z) ->
                            |[ 
		                	    b := b-1;
		                        swap(h, b, w)
		                    ]|
                            fi
                      ]|  
               		    od;

		                if (r-p <= q-w) -> x[k], y[k], q := w, q, r  
		                [] (q-w <= r-p) -> x[k], y[k], p := p, r, w
		                fi;

		                k := k+1

		            ]|
		            fi
                ]|
          	    od 
            ]|     
        ]|
        {post (%forall i : int | 0 <= i /\ i < 55 | true %) post}
    end

    |[

        var arr : array [10] of int;
        var d := 1111 : int;
        var i : int;


        arr[0]:= 3;
        arr[1]:= 7;
        arr[2]:= 2;
        arr[3]:= 5;
        arr[4]:= -8;
        arr[5]:= 11;
        arr[6]:= 2;
        arr[7]:= 1;
        arr[8]:= 8;
        arr[9]:= -2;

        ord(10, arr);
    
        {inv true inv}
        {bound d-1 bound}

        do (i < 10) ->
        |[
            write(arr[i]);
            write(", ");
            i,d := i+1, d-1
        ]|
        od
    ]|
end