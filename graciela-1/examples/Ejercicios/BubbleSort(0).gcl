//BubbleSort(0)

program main 
begin


    proc swap : (ref h1: array [10] of int, in x: int, in y: int) 
    begin
        var aux : int;

        {pre x >= 0 /\ y >= 0 pre}  
        |[
            aux   := h1[x];
            h1[x] := h1[y];
            h1[y] := aux
        ]|
        {post true post}
    end

    
  proc ord : (in N: int, ref h: array [10] of int)
  begin
      var n, cota: int;
    
      {pre N > 0 pre}  
      |[  
          n, cota := 0, 5000;

          {inv true inv} 
          {bound cota-1 bound}

          do (n != N) ->
          |[
              var k, cota2: int;

              k, cota2 := N-1, 5000;

              {inv true inv} 
              {bound cota2-1 bound}

              do (k != n) ->
              |[
                  if (h[k-1] <= h[k]) -> skip
                  [] (h[k-1] >  h[k]) -> swap(h, k-1, k)
                  fi;

                  k, cota2 := k-1, cota2-1 
              ]|
              od;

              n, cota := n+1, cota-1                
          ]|
          od

        ]|
        {post true post}
    end

    |[
        var arr : array [10] of int;
        var tam := 11 : int;
        var i : int;

        {inv true inv}
        {bound tam-i bound}
        do (i < 10) ->
        |[
            // writeln(tam-i);
            arr[i] := 10 - i;
            write(arr[i]);
            write(", ");
            i := i + 1
        ]|
        od;
        writeln(" ");

        ord(10, arr);

        i := 0;
        {inv true inv}
        {bound tam-i bound}
        do (i < 10) ->
        |[
            write(arr[i]);
            write(", ");
            i := i+1
        ]|
        od;
        writeln(" ")
    ]|

end
