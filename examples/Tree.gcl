program Tree.bin begin

abstract ANode(T)
begin
  {inv true inv}   
end


type Node(T) implements ANode(T)
begin
  /* Node variables */
  var element : T;
  var left, right : Node(T)*;

  {repinv true repinv}

  {coupinv true coupinv}

  /* Node procedures */
  func elemNode (current : Node(T)*, x : T, b : int) ->  boolean
     {pre  true pre}
     {post  true post}
     {bound b bound}
     |[
      if current == null -> false
        [] (*current).element == x -> true
        [] otherwise -> elemNode((*current).left, x , b-1) \/ elemNode((*current).right, x , b-1)
        fi
     ]| 

  proc print (in current : Node(T)*, in b : int)  
    {pre true pre}
    {post true post}
    {bound b bound}
    |[ if current == null -> skip
       [] current != null 
         -> if (*current).left != null -> print((*current).left, b-1)
            [] otherwise -> skip
            fi
          ; writeln((*current).element)
          ; if (*current).right != null -> print((*current).right, b-1) 
            [] otherwise -> skip
            fi
       fi
      
    ]|
  
end


abstract ATree(T)
begin
  /* ATree variables */
  const MAX := 100 : int;
  {inv true inv}
  /* ATree procedures */
end

type BinaryTreeO(T) implements ATree(T)
begin
  /* BinaryTree variables */
  var tam := 0 : int;
  var root     : Node(T)*;
  
  {repinv 0 <= tam /\ tam <= MAX repinv}

  {coupinv true coupinv}

  /* BinaryTree procedures */
  proc insert (inout t : BinaryTreeO(T), in x : T)
  
    {pre true pre}
    {post true post}
    |[ if t.root == null -> new(t.root)
                          ; (*t.root).element := x

       [] otherwise 
          -> var aux := t.root : Node(T)*
           ; var i   := 0      : int
           ; {inv true inv}
             {bound t.tam - i bound}
             do i < t.tam 
              -> if x <= (*aux).element
                    -> if (*aux).left == null
                          -> new((*aux).left) 
                           ; (*(*aux).left).element, i := x, t.tam-1
                       [] otherwise -> aux := (*aux).left
                       fi
                 [] otherwise 
                    -> if (*aux).right == null 
                        -> new((*aux).right)
                         ; (*(*aux).right).element, i := x, t.tam-1
                       [] otherwise -> aux := (*aux).right
                       fi
                 fi
                ; i := i + 1
             od
       fi
     ; t.tam := t.tam + 1
    ]|

    proc printf (in t : BinaryTreeO(T))
    
      {pre true pre}
      {post true post}
      |[
        print(t.root, t.tam)
      ]|
    
  
end

main
    |[ var bt : BinaryTreeO(int)
     ; insert(bt, 1)
     ; insert(bt, -10)
     ; insert(bt, 10)
     ; insert(bt, -1210)
     ; insert(bt, 9)
     ; insert(bt, 123)
     // ; insert(bt, 10)
     // ; insert(bt, 10)
     
     ; printf(bt)
     ; writeln("Size: ",bt.tam)
    ]|

end