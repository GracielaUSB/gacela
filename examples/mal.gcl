program mal.bin begin

main
  ⟦ const M, N, Ñ := 6, 8, 6 : int
  ; var i, j, k := 0, 0, 0 : int
  ; var x : array [M, N, Ñ] of int
  ; var y : int
  ; var c : char
  ; y := 5

  ; {inv   true    inv}
    {bound M - i bound}
    do i < M -> {inv   true    inv}
                {bound N - j bound}
                do j < N -> {inv true inv}
                            {bound Ñ - k bound}
                            do k < Ñ -> x [i, j, k] := i + j + k
                                      ; write (i+j+k, " ")
                                      ; k := k + 1
                            od
                          ; k, j := 0, j + 1
                          ; writeln()
                od
              ; writeln()
              ; writeln()
              ; j, i := 0, i + 1
    od

   ; { {4} \ {4} == {}  }
   ; {〈1,2,3〉 ++ 〈x : int | 0 < x /\ x < 4 | x〉 == 〈1,2,3,1,2,3〉}
   ; { ⟅1, 2, 3, 3⟆ union ⟅1, 1, 2, 3⟆ == ⟅1, 1, 2, 3, 3⟆ }
   ; { rel({x : int | 0 < x /\ x < 10 | (x,x)}) == rel({x : int | 0 < x /\ x < 10 | (x,x)})}

// ; writeln ((% max i : float | i == 3.14 | i %)) -- NOt implemented yet

; writeln ( (3,))

;         {0 elem {x : int | 0 <= x /\ x < 5 | x, x+10} } 
; writeln (0 elem {x : int | x < 5 /\ 0 < x | x, x+10})   

; writeln ( 0 elem {x : int | 0 < x /\ x < 5 | x, x+10} )     
; writeln (〈x : int  |  0  < x /\ x <  5  | x〉 ==〈1,2,3,4〉  )  
; writeln (〈x : int  |  0  < x /\ x <  5  | x〉 ==〈1,2,3,4,5〉) 
; writeln (i mod 2 == 1 /*=== False */ ==> x[100,100,100] > 0) // Test for jumping code  
// ; writeln ((% forall i : int | i elem <<>> | i > 0 %)) // Quant over set not implemented yet  
; writeln (〈x : char | 'a' < x /\ x < 'd' | x〉 ==〈'c','b'〉  ) 

  // ; writeln("-------------------------------------------------------")

  // ; i, j, k := 0, 0, 0
  // ; {inv   true    inv}
  //   {bound M - i bound}
  //   do i < M -> {inv   true    inv}
  //               {bound N - j bound}
  //               do j < N -> {inv true inv}
  //                           {bound Ñ - k bound}
  //                           do k < Ñ -> skip
  //                                     ; write (x [i,j,k], " ")
  //                                     ; k := k + 1
  //                           od
  //                         ; k, j := 0, j + 1
  //                         ; writeln()
  //               od
  //             ; writeln()
  //             ; writeln()
  //             ; j, i := 0, i +1
  //             ; writeln()
  //   od
  ⟧

end
