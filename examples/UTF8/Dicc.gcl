
import Diccionario

type Dicc implements Diccionario (int, char) begin
    const MAX : int
    ref clave : array [MAX] of int
    ref valor : array [MAX] of char
    tam : int

    {repinv MAX > 0 ∧ 0≤tam ∧ tam ≤ MAX  ∧
        (%forall i : int | 0 ≤ i ≤ tam
          | (%forall j : int | 0 ≤ j ≤ tam ∧ i ≢ j
              | clave[i] ≢ clave[j]
            %)
        %)
    repinv}

    {coupinv  conoc ≡ {i : 0≤i≤tam : clave[i]} ∧
            table ≡ {i : 0≤i≤tam : (clave,valor[i])}
    coupinv}

    proc buscar ( in d : Diccionario , in c : T0 , out v : T1 )
        var x : int;
        {pre (% ∃ i | 0≤i≤d.tam | d.clave[i] ≡ c) pre}
        ⟦
            x ≔ 0;

            {inv 0 ≤ x ≤ d.tam inv}
            {bound tam - x bound}
            do (clave[x] ≢ c) → x ≔ x+1 od

            v ≔ valor[x]
        ⟧
        {post (% ∃ i | 0≤i≤ d.tam | d.table(i) ≡ v %) post}
end

proc hola (Dicc d )
