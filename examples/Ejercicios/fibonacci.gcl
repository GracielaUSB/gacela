
abstract Diccionario (t0) begin
	var MAX : int;
	var conoc : int;
	var tabla : int;

	{inv MAX > 0 /\ conoc <= MAX inv}

    proc crear : (in m : int)
        {pre m > 0 pre}
        {post MAX == m /\ conoc == m post}

    proc agregar : (inout d : int, in c : int, in v : int)
        {pre !(c == conoc) /\ conoc < MAX pre}
        {post conoc == conoc + 1 /\  tabla == tabla + c post}

    proc eliminar : (inout d : int, in c : int)
        {pre c == conoc pre}
        {post conoc == conoc - c /\ tabla == tabla - c post}

    proc buscar : (in d : int, in c: int, out v : int)
        {pre c == conoc pre}
        {post v == c post}

    proc existe : (in d : int, in c : int, out e : boolean)
        {pre true pre}
        {post e == c > 2 post}
end



program main begin

// comentario
          // comentario
	func fibonacci : (n: int) -> int
	begin
		if (n == 0) -> 0
		[] (n == 1) -> 1
		[] ((n != 0) \/ (n != 1)) -> fibonacci(n-1) + fibonacci(n-2)
		fi
	end

	proc readNum : ()
	begin
		var num : int;
		read(num);

		{pre num >= 0 pre}
		|[
		    write("\nEl resultado es: ");
	        writeln(fibonacci(num))
		]|
		{post true post}
	end

	|[
	    write("Numero de Fibonacci, ingrese un numero: ");
		readNum()
	]|

end
