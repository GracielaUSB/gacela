; ModuleID = 'main'

@0 = constant [3 x i16] [i16 44, i16 32, i16 0]

declare i32 @_random()

declare void @_abort(i32, i32, i32)

declare void @_writeLnInt(i32)

declare void @_writeInt(i32)

declare i32 @_min(i32, i32)

declare i32 @_max(i32, i32)

declare void @_writeLnChar(i9)

declare void @_writeChar(i9)

declare void @_writeLnBool(i1)

declare void @_writeBool(i1)

declare void @_writeLnDouble(double)

declare void @_writeDouble(double)

declare double @llvm.sqrt.f64(double)

declare double @llvm.fabs.f64(double)

declare double @_minF(double, double)

declare double @_maxF(double, double)

declare double @llvm.pow.f64(double, double)

declare i32 @_writeLnString(i16* nocapture)

declare i32 @_writeString(i16* nocapture)

declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32)

declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32)

declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32)

declare i32 @_readIntStd()

declare i9 @_readCharStd()

declare double @_readDoubleStd()

declare i8* @_openFile(i8*)

declare i32 @_readFileInt(i8*)

declare i9 @_readFileChar(i8*)

declare double @_readFileDouble(i8*)

declare void @_closeFile(i8*)

define void @swap(i32* %h1, i32 %x, i32 %y) {
  %_x = alloca i32
  store i32 %x, i32* %_x
  %_y = alloca i32
  store i32 %y, i32* %_y
  %aux = alloca i32
  store i32 0, i32* %aux
  %1 = load i32* %_x
  %2 = icmp sge i32 %1, 0
  %3 = load i32* %_y
  %4 = icmp sge i32 %3, 0
  %5 = and i1 %2, %4
  %_resPreswap = alloca i1
  store i1 %5, i1* %_resPreswap
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %0
  call void @_abort(i32 3, i32 8, i32 9)
  br label %7

; <label>:7                                       ; preds = %6, %0
  %8 = load i32* %_x
  %9 = getelementptr inbounds i32* %h1, i32 %8
  %10 = load i32* %9
  store i32 %10, i32* %aux
  %11 = load i32* %_y
  %12 = getelementptr inbounds i32* %h1, i32 %11
  %13 = load i32* %12
  %14 = load i32* %_x
  %15 = getelementptr inbounds i32* %h1, i32 %14
  store i32 %13, i32* %15
  %16 = load i32* %aux
  %17 = load i32* %_y
  %18 = getelementptr inbounds i32* %h1, i32 %17
  store i32 %16, i32* %18
  %19 = load i1* %_resPreswap
  %20 = xor i1 %19, true
  %21 = or i1 %20, true
  br i1 %21, label %23, label %22

; <label>:22                                      ; preds = %7
  call void @_abort(i32 4, i32 14, i32 9)
  br label %23

; <label>:23                                      ; preds = %22, %7
  ret void
}

define void @ord(i32 %N, i32* %h) {
  %_N = alloca i32
  store i32 %N, i32* %_N
  %b = alloca i1
  store i1 false, i1* %b
  %n = alloca i32
  store i32 0, i32* %n
  %cota = alloca i32
  store i32 0, i32* %cota
  %1 = load i32* %_N
  %2 = icmp sgt i32 %1, 0
  %_resPreord = alloca i1
  store i1 %2, i1* %_resPreord
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  call void @_abort(i32 3, i32 23, i32 9)
  br label %4

; <label>:4                                       ; preds = %3, %0
  %__n = alloca i32
  store i32 0, i32* %__n
  %__cota = alloca i32
  store i32 5000, i32* %__cota
  %5 = load i32* %__n
  store i32 %5, i32* %n
  %6 = load i32* %__cota
  store i32 %6, i32* %cota
  store i1 false, i1* %b
  %"61" = alloca i32
  store i32 2147483647, i32* %"61"
  br label %7

; <label>:7                                       ; preds = %119, %4
  br i1 true, label %9, label %8

; <label>:8                                       ; preds = %7
  call void @_abort(i32 6, i32 28, i32 13)
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i32* %cota
  %11 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %10, i32 1)
  %12 = extractvalue { i32, i1 } %11, 1
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @_abort(i32 12, i32 28, i32 24)
  unreachable

; <label>:14                                      ; preds = %9
  %15 = extractvalue { i32, i1 } %11, 0
  %16 = load i32* %"61"
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %14
  %19 = icmp sle i32 %15, 0
  store i32 %15, i32* %"61"
  br i1 %19, label %21, label %22

; <label>:20                                      ; preds = %14
  call void @_abort(i32 7, i32 30, i32 13)
  unreachable

; <label>:21                                      ; preds = %18
  call void @_abort(i32 8, i32 30, i32 13)
  unreachable

; <label>:22                                      ; preds = %18
  %23 = load i32* %n
  %24 = load i32* %_N
  %25 = icmp ne i32 %23, %24
  %26 = load i1* %b
  %27 = xor i1 %26, true
  %28 = and i1 %25, %27
  br i1 %28, label %29, label %123

; <label>:29                                      ; preds = %22
  %k = alloca i32
  store i32 0, i32* %k
  %cota2 = alloca i32
  store i32 0, i32* %cota2
  %30 = load i32* %_N
  %31 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %30, i32 1)
  %32 = extractvalue { i32, i1 } %31, 1
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %29
  call void @_abort(i32 12, i32 34, i32 30)
  unreachable

; <label>:34                                      ; preds = %29
  %35 = extractvalue { i32, i1 } %31, 0
  %__k = alloca i32
  store i32 %35, i32* %__k
  %__cota2 = alloca i32
  store i32 5000, i32* %__cota2
  %36 = load i32* %__k
  store i32 %36, i32* %k
  %37 = load i32* %__cota2
  store i32 %37, i32* %cota2
  store i1 true, i1* %b
  %"120" = alloca i32
  store i32 2147483647, i32* %"120"
  br label %38

; <label>:38                                      ; preds = %104, %34
  br i1 true, label %40, label %39

; <label>:39                                      ; preds = %38
  call void @_abort(i32 6, i32 38, i32 17)
  br label %40

; <label>:40                                      ; preds = %39, %38
  %41 = load i32* %cota2
  %42 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %41, i32 1)
  %43 = extractvalue { i32, i1 } %42, 1
  br i1 %43, label %44, label %45

; <label>:44                                      ; preds = %40
  call void @_abort(i32 12, i32 38, i32 29)
  unreachable

; <label>:45                                      ; preds = %40
  %46 = extractvalue { i32, i1 } %42, 0
  %47 = load i32* %"120"
  %48 = icmp slt i32 %46, %47
  br i1 %48, label %49, label %51

; <label>:49                                      ; preds = %45
  %50 = icmp sle i32 %46, 0
  store i32 %46, i32* %"120"
  br i1 %50, label %52, label %53

; <label>:51                                      ; preds = %45
  call void @_abort(i32 7, i32 40, i32 17)
  unreachable

; <label>:52                                      ; preds = %49
  call void @_abort(i32 8, i32 40, i32 17)
  unreachable

; <label>:53                                      ; preds = %49
  %54 = load i32* %k
  %55 = load i32* %n
  %56 = icmp ne i32 %54, %55
  br i1 %56, label %57, label %108

; <label>:57                                      ; preds = %53
  %58 = load i32* %k
  %59 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %58, i32 1)
  %60 = extractvalue { i32, i1 } %59, 1
  br i1 %60, label %61, label %62

; <label>:61                                      ; preds = %57
  call void @_abort(i32 12, i32 43, i32 28)
  unreachable

; <label>:62                                      ; preds = %57
  %63 = extractvalue { i32, i1 } %59, 0
  %64 = getelementptr inbounds i32* %h, i32 %63
  %65 = load i32* %64
  %66 = load i32* %k
  %67 = getelementptr inbounds i32* %h, i32 %66
  %68 = load i32* %67
  %69 = icmp sle i32 %65, %68
  br i1 %69, label %70, label %71

; <label>:70                                      ; preds = %62
  br label %93

; <label>:71                                      ; preds = %62
  %72 = load i32* %k
  %73 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %72, i32 1)
  %74 = extractvalue { i32, i1 } %73, 1
  br i1 %74, label %75, label %76

; <label>:75                                      ; preds = %71
  call void @_abort(i32 12, i32 44, i32 28)
  unreachable

; <label>:76                                      ; preds = %71
  %77 = extractvalue { i32, i1 } %73, 0
  %78 = getelementptr inbounds i32* %h, i32 %77
  %79 = load i32* %78
  %80 = load i32* %k
  %81 = getelementptr inbounds i32* %h, i32 %80
  %82 = load i32* %81
  %83 = icmp sgt i32 %79, %82
  br i1 %83, label %84, label %92

; <label>:84                                      ; preds = %76
  store i1 false, i1* %b
  %85 = load i32* %k
  %86 = load i32* %k
  %87 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %86, i32 1)
  %88 = extractvalue { i32, i1 } %87, 1
  br i1 %88, label %89, label %90

; <label>:89                                      ; preds = %84
  call void @_abort(i32 12, i32 47, i32 34)
  unreachable

; <label>:90                                      ; preds = %84
  %91 = extractvalue { i32, i1 } %87, 0
  call void @swap(i32* %h, i32 %91, i32 %85)
  br label %93

; <label>:92                                      ; preds = %76
  call void @_abort(i32 1, i32 43, i32 21)
  unreachable

; <label>:93                                      ; preds = %90, %70
  %94 = load i32* %k
  %95 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %94, i32 1)
  %96 = extractvalue { i32, i1 } %95, 1
  br i1 %96, label %97, label %98

; <label>:97                                      ; preds = %93
  call void @_abort(i32 12, i32 51, i32 34)
  unreachable

; <label>:98                                      ; preds = %93
  %99 = extractvalue { i32, i1 } %95, 0
  store i32 %99, i32* %__k
  %100 = load i32* %cota2
  %101 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %100, i32 1)
  %102 = extractvalue { i32, i1 } %101, 1
  br i1 %102, label %103, label %104

; <label>:103                                     ; preds = %98
  call void @_abort(i32 12, i32 51, i32 43)
  unreachable

; <label>:104                                     ; preds = %98
  %105 = extractvalue { i32, i1 } %101, 0
  store i32 %105, i32* %__cota2
  %106 = load i32* %__k
  store i32 %106, i32* %k
  %107 = load i32* %__cota2
  store i32 %107, i32* %cota2
  br label %38

; <label>:108                                     ; preds = %53
  %109 = load i32* %n
  %110 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %109, i32 1)
  %111 = extractvalue { i32, i1 } %110, 1
  br i1 %111, label %112, label %113

; <label>:112                                     ; preds = %108
  call void @_abort(i32 12, i32 55, i32 29)
  unreachable

; <label>:113                                     ; preds = %108
  %114 = extractvalue { i32, i1 } %110, 0
  store i32 %114, i32* %__n
  %115 = load i32* %cota
  %116 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %115, i32 1)
  %117 = extractvalue { i32, i1 } %116, 1
  br i1 %117, label %118, label %119

; <label>:118                                     ; preds = %113
  call void @_abort(i32 12, i32 55, i32 37)
  unreachable

; <label>:119                                     ; preds = %113
  %120 = extractvalue { i32, i1 } %116, 0
  store i32 %120, i32* %__cota
  %121 = load i32* %__n
  store i32 %121, i32* %n
  %122 = load i32* %__cota
  store i32 %122, i32* %cota
  br label %7

; <label>:123                                     ; preds = %22
  %124 = load i1* %_resPreord
  %125 = xor i1 %124, true
  %126 = or i1 %125, true
  br i1 %126, label %128, label %127

; <label>:127                                     ; preds = %123
  call void @_abort(i32 4, i32 61, i32 5)
  br label %128

; <label>:128                                     ; preds = %127, %123
  ret void
}

define void @main() {
  %arr = alloca i32, i32 10
  %d = alloca i32
  store i32 1111, i32* %d
  %i = alloca i32
  store i32 0, i32* %i
  %1 = getelementptr inbounds i32* %arr, i32 0
  store i32 3, i32* %1
  %2 = getelementptr inbounds i32* %arr, i32 1
  store i32 7, i32* %2
  %3 = getelementptr inbounds i32* %arr, i32 2
  store i32 2, i32* %3
  %4 = getelementptr inbounds i32* %arr, i32 3
  store i32 5, i32* %4
  %5 = getelementptr inbounds i32* %arr, i32 4
  store i32 -8, i32* %5
  %6 = getelementptr inbounds i32* %arr, i32 5
  store i32 11, i32* %6
  %7 = getelementptr inbounds i32* %arr, i32 6
  store i32 2, i32* %7
  %8 = getelementptr inbounds i32* %arr, i32 7
  store i32 1, i32* %8
  %9 = getelementptr inbounds i32* %arr, i32 8
  store i32 8, i32* %9
  %10 = getelementptr inbounds i32* %arr, i32 9
  store i32 -2, i32* %10
  call void @ord(i32 10, i32* %arr)
  %"296" = alloca i32
  store i32 2147483647, i32* %"296"
  br label %11

; <label>:11                                      ; preds = %44, %0
  br i1 true, label %13, label %12

; <label>:12                                      ; preds = %11
  call void @_abort(i32 6, i32 82, i32 9)
  br label %13

; <label>:13                                      ; preds = %12, %11
  %14 = load i32* %d
  %15 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 1)
  %16 = extractvalue { i32, i1 } %15, 1
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %13
  call void @_abort(i32 12, i32 82, i32 17)
  unreachable

; <label>:18                                      ; preds = %13
  %19 = extractvalue { i32, i1 } %15, 0
  %20 = load i32* %"296"
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %22, label %24

; <label>:22                                      ; preds = %18
  %23 = icmp sle i32 %19, 0
  store i32 %19, i32* %"296"
  br i1 %23, label %25, label %26

; <label>:24                                      ; preds = %18
  call void @_abort(i32 7, i32 84, i32 9)
  unreachable

; <label>:25                                      ; preds = %22
  call void @_abort(i32 8, i32 84, i32 9)
  unreachable

; <label>:26                                      ; preds = %22
  %27 = load i32* %i
  %28 = icmp slt i32 %27, 10
  br i1 %28, label %29, label %48

; <label>:29                                      ; preds = %26
  %30 = load i32* %i
  %31 = getelementptr inbounds i32* %arr, i32 %30
  %32 = load i32* %31
  call void @_writeInt(i32 %32)
  %33 = call i32 @_writeString(i16* getelementptr inbounds ([3 x i16]* @0, i64 0, i64 0))
  %34 = load i32* %i
  %35 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %34, i32 1)
  %36 = extractvalue { i32, i1 } %35, 1
  br i1 %36, label %37, label %38

; <label>:37                                      ; preds = %29
  call void @_abort(i32 12, i32 88, i32 21)
  unreachable

; <label>:38                                      ; preds = %29
  %39 = extractvalue { i32, i1 } %35, 0
  %__i = alloca i32
  store i32 %39, i32* %__i
  %40 = load i32* %d
  %41 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %40, i32 1)
  %42 = extractvalue { i32, i1 } %41, 1
  br i1 %42, label %43, label %44

; <label>:43                                      ; preds = %38
  call void @_abort(i32 12, i32 88, i32 26)
  unreachable

; <label>:44                                      ; preds = %38
  %45 = extractvalue { i32, i1 } %41, 0
  %__d = alloca i32
  store i32 %45, i32* %__d
  %46 = load i32* %__i
  store i32 %46, i32* %i
  %47 = load i32* %__d
  store i32 %47, i32* %d
  br label %11

; <label>:48                                      ; preds = %26
  ret void
}
