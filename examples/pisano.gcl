//Pisano (Fibonacci and other stuff)
program Hola.bin begin

  abstract Diccionario (t0,t1) begin
    const MAX := 100 : int;
    var conoc        : set of t0;
    var tabla        : func t0 -> t1;

    {inv 1 > 0 inv}

    proc crear (out d : Diccionario(t0,t1))
      {pre  true  pre}
      {post true post}


    proc agregar (out d : Diccionario(t0,t1), in clave : t0, in valor : t1)
      {pre  true pre}
      {post true post}
  end

  type Dicc(Clave,Valor) implements Diccionario (Clave,Valor) begin
    var   tam    : int;
    var   clave  : array [MAX] of Clave;
    var   valor  : array [MAX] of Valor;

    {repinv 0 <= tam /\ tam <= MAX repinv}

    {coupinv false coupinv}
    
    proc crear (out d : Dicc(Clave,Valor))
      {pre true pre}
      {post d.tam == 0 post}
      ‚ü¶ 
          d.tam := 0
      ‚üß
      

    proc agregar (out d : Dicc(Clave,Valor), in clave: Clave, in valor : Valor)
      var tam' := d.tam : int;

      {pre  d.tam < d.MAX pre}
      {post d.tam == tam' + 1 post}
      
      ‚ü¶
        d.clave[d.tam], d.valor[d.tam], d.tam := clave, valor, d.tam + 1
        // Caso que falla en el assign d.clave[i] := d.tam
      ‚üß

    proc mostrar (in d : Dicc(Clave,Valor))
    
      {pre true pre}
      {post true post}
      ‚ü¶ var i := 0 : int
      ; {inv true inv}
        {bound d.tam - i bound}
        do i < d.tam -> writeln(d.clave[i], " -> ", d.valor[i]) 
                      ; i := i + 1        
        od
      ‚üß    

    proc pertenece (in d : Dicc(Clave,Valor), in c : Clave, out b : boolean)
    
      {pre true pre}
      {post true post}
      |[ 
        var i := 0 : int
      ; {inv true inv}
        {bound d.tam - i bound}
        do i < d.tam  ->
          if d.clave[i] == c -> b := true ; write("Existe")
          [] otherwise -> skip
          fi;
          i := i + 1
        od
      ]|
    
  end




  func fibo (i : int) -> int
    {pre i >= 0 pre}
    {post i > 0 post}
    {bound i bound}
    ‚ü¶
       1
    ‚üß

  func fibonacci (n : int*, x : array [10] of int) -> boolean
    {pre true pre}
    {post true post}
    ‚ü¶
          if/*  üòÄ */if/* üòâ */if/*  ü§ì */if 
                   true -> true 
          fi -> true fi -> true fi -> true fi
    ‚üß

  proc readNum ()
      var num : int;
      read(num);
      var h : int;
      read(h);

      {pre num ‚â• 0 pre}
      {post true post}
      ‚ü¶ var i,j,k := 1,2,3 : int
      ; write("El resultado es: ")
      ; { i > 1 } writeln(1) { i > 100}
      ‚üß
      

  proc readNum2 (out i : int*)
      {pre true pre}
      {post true post}
      {bound 1 bound}
      ‚ü¶ free(i)
      ; if i != null
          -> writeln("No es null asi que la nulifico y entro recursivamente")
           ; readNum2(i)
        [] i == null 
          -> writeln("Es null, termino la recursion")
        fi
      ‚üß
      

  proc hola2 (out i : int, in t : array[10] of int)
    {pre true pre}
    {post true post}
    {bound 1 bound}
    ‚ü¶i := 10
    ; ‚ü¶ var i := 100: int
      ; if i > 1 ->
          var i := 1000 + t[1] : int;

          writeln(i, "hola")
        fi
      ; writeln(i)
      ‚üß
    ; writeln(i)
    ‚üß

  
  proc hola (inout x : int)

    {pre x == 0 pre}
    {post x == 11 post}
    ‚ü¶
        read(x)

        // { x >= 10 }

        // ; x := 10
    ‚üß
    
  
  main
  ‚ü¶ var d  : Dicc(int,int)
  ; var d1 : Dicc(int,int)*
  ; var b  : boolean
  ; new(d1)
  ; crear(*d1)
  ; writeln((*d1).tam)
  ; agregar(*d1, 1, 1)
  ; agregar(*d1, 2, 10)
  ; agregar(*d1, 3, 100)
  ; mostrar(*d1)
  ; writeln((*d1).tam)
  ; pertenece(*d1, 3, b)
  ; pertenece(*d1, 4, b)
  ; free(d1)
  ‚üß
  
end
