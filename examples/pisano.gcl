//Pisano (Fibonacci and other stuff)

abstract Diccionario (t0,t1) begin
    var MAX   : int;
    var conoc : set of t0;
    var tabla : func t0 -> t1;

    {inv MAX > 0 /\ conoc <=  MAX inv}

    proc crear (out m : int)
        {pre    0 <  m                pre}
        {post MAX == m /\ conoc == m post}

    proc agregar (inout d : int, in c : int, in v : int)
        {pre  !(c   == conoc)    /\ conoc <  MAX        pre}
        {post conoc == conoc + 1 /\ tabla == tabla + c post}

    proc eliminar (inout d : int, in c : int)
        {pre  c     == conoc pre}
        {post conoc == conoc - c /\ tabla == tabla - c post}

    proc buscar (in d : int, in c: int, out v : int)
        {pre  c == conoc  pre}
        {post v == c     post}

    proc existe (in d : int, in c : int, out e : boolean)
        {pre  true       pre}
        {post e == c > 2 post}
end


type Dicc implements Diccionario (int***,char)
begin

    var MAX := 10 : int;
    var   tam       : int;
    var   clave     : array[MAX] of int;
    var   valor     : array[MAX] of int;

    {repinv MAX > 0 ∧ //{-0≤tam ∧ tam ≤ MAX  ∧
        (%forall i : int | 0 ≤ i /\ i ≤ tam
          | (%forall j : int | 0 ≤ j /\ j ≤ tam // ∧ i ≢ j
              | clave[i] ≢ clave[j]
            %)
        %)
    repinv}

    {coupinv tam < MAX coupinv}

    proc crear (in m : int, out d : int)
    begin
        {pre    0 < m              pre}
        |[
            MAX, tam := m, 0
        ]|
        {post MAX == m /\ tam ==0  post}
    end

    proc agregar (inout d : int , in c : int, in v : int)
    begin
        var x      : int;
        var oldTam : int;
        {pre tam < MAX /\ !(%exist i : int | 0 <= i /\ i < tam | clave[i] == c %) pre}
        |[
            oldTam := tam;
            clave[tam], valor[tam], tam := c, v, tam + 1
        ]|
        {post tam == oldTam + 1 /\ (%exist i : int | 0 <= i /\ i < tam | clave[i] == c /\ valor[x] == v %) post}
    end

    proc eliminar (inout d : int, in c : int)
    begin
        var x      : int;
        var oldTam : int ;

        {pre (%exist i : int | 0 <= i /\ i < tam | clave[i] == c %)  pre}
        |[
            x := 4;
            oldTam := tam;
            {inv 0 <= x /\ x <= tam inv}

            {bound tam - x bound}
            do x < tam ->
                if clave[x] == x -> x, d, tam := x+1, d, tam-1
                [] clave[x] != x -> x := x+1
                fi
            od
        ]|
        {post tam == oldTam - 1  post}
    end

    proc buscar( in d : int, in c : int , out v : int )
    begin
        var x : int;
        {pre (%exist i : int | 0 <= i /\ i < tam | clave[i] == c %) pre}
       |[
            x := 0;

            {inv 0 <= x /\ x <= tam inv}
            {bound tam - x bound}
            do clave[x] != c -> |[
                x := x + 1
            ]|
            od;

            v := valor[x]

        ]|
        {post (%exist i : int | 0 <= i /\ i < tam | c == clave[x] /\ v == valor[x] %) post}
    end

    proc existe (in d : int, in c : int, out e : boolean)
    begin
        var x : int;
        {pre true pre}
        |[
            x := 0;
            e := false;

            {inv 0 <= x /\ x < tam inv}
            {bound tam - x bound}
            do x < tam /\ e == false ->
                if clave[x]  == c -> e := true
                [] clave[x] != c -> x := x + 1
                fi
            od
        ]|
        {post e == (%exist i : int | 0 <= i /\ i < tam | clave[i] == c%) post}
    end
end


program main begin

    func fibonacci (n : int) -> int
    begin
        if n == 0  -> 0
        [] n == 1  -> 1
        [] n >  1  -> fibonacci(n-1) + fibonacci(n-2)
        fi
    end

    proc readNum ()
    begin
        var num : int;
        read(num);

        {pre num ≥ 0 pre}
        |[
            var i,j,k := 1,2,3 : int;
            write("El resultado es: ");
            writeln(fibonacci(num))
        ]|
        {post true post}
    end

    proc readNum2 ()
    begin
        var num : int;
        read(num);

        {pre num ≥ 0 pre}
        |[
            write("El resultado es: ");
            writeln(fibonacci(num))
        ]|
        {post true post}
    end


    |[
        var   m := 10 : int;
        var   x := 0  : int;
        var   a       : array[m] of int;

        {inv (%forall i : int | i > 0 /\ i < 10 | true %) inv}
        {bound (m-x) bound}
        do x < 10 ->
        |[  a[x] := x
        ;   writeln(a[x])
        ;   x := x+1
        ]|
        od;
        random(x);
        write("El random es: ");
        writeln(x);
        writeln(1-1-1);
        write("Numero de Fibonacci, ingrese un numero: ");
        x,m := 1,20;
        readNum()
    ]|
end
