program arr.bin begin

abstract AA(T)
begin
  /* AA variables */  
  var f : rel int <-> int;
  {inv true inv}
  /* AA procedures */
end

type A(T) implements AA(T)
begin
  /* A variables */
  var a : array[10] of int;
  var i : int;
  {repinv #{(2,2)} == 1 
     ∧ {(1,2)} ∪ {(1,1)} == {(1,1),(1,2)}
     ∧ {(2,2)} \ {(1,2)}  == {(2,2)}
     ∧ ⟅1,1,2⟆ ⊂ ⟅1,1,2,2⟆
     ∧ ⟅1,1,2,2⟆ msum ⟅3,3⟆ == ⟅1,2,3,1,2,3⟆
     ∧ rel({(1,1),(1,1)}) == rel({(1,1)}) 
     ∧ func({x : int | 0 < x ∧ x <= 5 | (x,x*10)} ∪ {(5,50)}) == func({(1,10),(2,20),(3,30),(4,40),(5,50)})
     ∧  rel({x : int | 0 < x ∧ x <= 5 | (x,x*10)}) == rel({(1,10),(2,20),(3,30),(4,40),(5,50)})
     ∧ domain(func({x : int | 0 < x ∧ x <= 5 | (x,x*10)})) == {x : int | 0 < x ∧ x <= 5 | x}
     ∧ 〈1,2,3,4,3,2,1〉!5 == 2
     ∧ 〈(1,2),(3,4),(3,2)〉!1 == (3,4)
     ∧ f == rel({(1,1),(2,10),(2,3)})
     ∧ f@2 == {10,3}
  repinv}

  where { f := rel({(1,1),(2,10),(2,3)}) }
  /* A procedures */

  proc hola (out t : A(T))
    {pre true pre}
    {post true post}
    |[
      writeln(t.a[1])
    ]|
end

main
  |[
  var a : A(int)*;
  new(a);
  if true -> var a : A(int)
       ; if  true -> var a : A(int); skip fi 
  fi;
  (*a).a[1] := 10;
  writeln((*a).a[1]);
  hola(*a);
  free(a)
  ]|
end