program nuevo.bin begin

func gcd (A:int, B:int) -> int
  {pre A >= 0 /\ B >= 0 pre}
  {post A mod gcd == 0 /\ B mod gcd == 0 /\
    !(%exist i : int | A min B < i /\ i < A max B | A mod i == 0 /\ B mod i == 0 %) post}
  {bound A + B bound}
  |[ if A == B -> A
     [] A >  B -> gcd (A-B, B)
     [] A <  B -> gcd (A, B-A)
     fi
  ]|


proc gcdDo (in A : int, in B : int, out Z : int)

  var a, b, x, y, u, v := A, B, 1, 0, 0, 1 : int;

  {pre A >= 0 /\ B >= 0 pre}
  {post Z == gcd (A,B) post}
  |[ {inv true inv}
     {bound b bound}
     do b â‰  0 -> var q, r := a / b, a mod b : int
               ; a, b, x, y, u, v := b, r, u, v, x - q*u, y - q*v
     od
   ; Z := x*A + y*B
  ]|

main
  |[ var A, B, Z : int
   ; read(A, B)
   ; gcdDo (A, B, Z)
   ; if Z == gcd(A,B) -> writeln(Z, " == ", gcd(A,B))
     [] otherwise     -> abort
     fi
  ]|
end
