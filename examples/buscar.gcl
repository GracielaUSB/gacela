//Linear Search
abstract jamonAbstracto (a)
begin
	// jamonAbstracto variables
	var a : int;
	
	{inv true inv}

	// func hola ( ) -> int
	// begin
	// 	if true -> 1
	// 	[] false -> 2
	// 	fi
	// end

	// jamonAbstracto procedures
	proc name ( ) 	
		{pre true pre}
		{post true post}
	

end

type jamon implements jamonAbstracto (int)
begin
	/* jamon variables */
	var i,j,k : int;
	const a := 1 : int;
	
	{repinv true repinv}

	{coupinv true coupinv}

	/* jamon procedures */
	proc name () begin
	
		{pre true pre}
		|[
        	read(i,j,k)
		]|
		{post true post}
	end
end

program hola begin

    proc hola ( in k : int, out j : int) begin
    	var p : int*;
    	var i, j, k := -1+2, 2, 1+*p: int;
    	const z := 1 : int;

        {pre (% sigma i : int | 0 <= i /\ i <= 10 | 1.0 %) == 10.0 pre}
        |[
		    write(1);
		    writeln(i);
		    read(i,j,k)
        ]|
        {post true post}
    end
    
|[
	var x : int;
	if x > 10  -> write(1)
	[] x == 1  -> write(0)
	[] x < -10 -> write(-1)
	fi
]|

end



/*
        	{inv true inv}
		    {bound i bound}
		    do true ->
		    	if true  -> 
		    		{inv true inv}
		    		{bound i bound}
		    		do i ->
		    			if true -> 
				    		if true -> writeln(1) 
				    		[] false -> read(i)
				    		fi
				    	[] false -> 
				    		|[
				    			var i,j,k := 'c', 'b', 'h': char;
				    			write(i)
				    		]|
				    	fi
		    		od
		    	[] false -> write(2)
		    	fi
		    od;*/
		    // hola();
