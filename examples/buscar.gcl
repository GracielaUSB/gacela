// //Linear Search
// abstract jamonAbstracto (a)
// begin
// 	// jamonAbstracto variables
// 	var a : int;
	
// 	{inv true inv}

// 	// func hola ( ) -> int
// 	// begin
// 	// 	if true -> 1
// 	// 	[] false -> 2
// 	// 	fi
// 	// end

// 	// jamonAbstracto procedures
// 	proc name ( ) 	
// 		{pre true pre}
// 		{post true post}
	

// end

// type jamon implements jamonAbstracto (int)
// begin
// 	/* jamon variables */
// 	var i,j,k : int;
// 	const a := 1 : int;
	
// 	{repinv true repinv}

// 	{coupinv true coupinv}

// 	/* jamon procedures */
// 	proc name () begin
	
// 		{pre true pre}
// 		|[
//         	read(i,j,k)
// 		]|
// 		{post true post}
// 	end
// end

program hola begin
	proc chao (in k : int, out j : int)
	
		{pre true pre}
		{post true post}
		|[
			write(1)
		]|
	


    proc hola ( in k : int, out j : int) 
    	var p : int*;
    	var i,j1,k1:= -1+2, 2, 1: int;
    	const z := 1 : int;

        {pre k == 2 pre}
        {post true post}
        |[
		    write(1);
		    // writeln(1);
		    // chao(k,k)
		    // read(z,j,p)
        ]|
        

    
|[
	var a  : int;
	read(a);
	if a > 1 -> 
		|[
			|[
				writeln(101)
			]|
			
		]|
	[] a < 1  -> writeln(2)
	fi;
	hola(1,a);
	write(1)
]|

end



/*
        	{inv true inv}
		    {bound i bound}
		    do true ->
		    	if true  -> 
		    		{inv true inv}
		    		{bound i bound}
		    		do i ->
		    			if true -> 
				    		if true -> writeln(1) 
				    		[] false -> read(i)
				    		fi
				    	[] false -> 
				    		|[
				    			var i,j,k := 'c', 'b', 'h': char;
				    			write(i)
				    		]|
				    	fi
		    		od
		    	[] false -> write(2)
		    	fi
		    od;*/
		    // hola();
