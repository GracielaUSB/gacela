// //Linear Search
// abstract jamonAbstracto (a)
// begin
// 	// jamonAbstracto variables
// 	var a : int;
	
// 	{inv true inv}

// 	// func hola ( ) -> int
// 	// begin
// 	// 	if true -> 1
// 	// 	[] false -> 2
// 	// 	fi
// 	// end

// 	// jamonAbstracto procedures
// 	proc name ( ) 	
// 		{pre true pre}
// 		{post true post}
	

// end

// type jamon implements jamonAbstracto (int)
// begin
// 	/* jamon variables */
// 	var i,j,k : int;
// 	const a := 1 : int;
	
// 	{repinv true repinv}

// 	{coupinv true coupinv}

// 	/* jamon procedures */
// 	proc name () begin
	
// 		{pre true pre}
// 		|[
//         	read(i,j,k)
// 		]|
// 		{post true post}
// 	end
// end

program hola begin
	// proc chao (in k : int, out j : int) begin
	
	// 	{pre true pre}
	// 	|[
	// 		write(1)
	// 	]|
	// 	{post true post}
	// end
	


    proc hola ( in k : int, out j : int) begin
    	var p : int*;
    	var i, j, k := -1+2, 2, 1: int;
    	const z := 1 : int;

        {pre (% sigma i : int | 0 <= i /\ i <= 10 | 1.0 %) == 10.0 pre}
        |[
		    write(1);
		    writeln(1);
		    chao(k,k);
		    {}
		    // read(z,j,p)
        ]|
        {post true post}
    end
    
|[
	var a := 1 : int;
	read(a);
	if a > 1 -> 
		|[
			|[
				writeln(101)
			]|
			
		]|
	[] a < 1  -> writeln(2)
	fi;
	write(1)
]|

end

