program List.bin begin


  abstract ANode(T)
  begin
    /* Node variables */
     var element : T;
     var next    : ANode(T)*;


    {repinv true repinv}


    
    /* Node procedures */

  end

  type Node(T) implements ANode(T) begin

    {repinv true repinv}
    {coupinv true coupinv}

    
    func hola (i : int) -> int
      {pre  true pre}
      {post  true post}
      |[
        2
      ]|


    func elemNode (n : Node(T)*, x : T, b : int) -> boolean
      {pre  true  pre}
      {post true post}
      {bound b  bound}
      |[ if n == null         -> false
         [] (*n).element == x -> true
         [] otherwise         -> elemNode((*n).next, x, b-1)
         fi        
      ]|

    func atNode(n : Node(T)*, pos : int) -> T
      {pre  n != null  pre}
      {post n != null post}
      {bound pos bound}
      |[ if pos == 0   -> (*n).element
         [] otherwise  -> atNode((*n).next, pos-1)
         fi        
      ]|

    proc hola(in n : Node(T)*)
      {pre  n != null  pre}
      {post n != null post}
      |[ if n == null   -> skip
         fi        
      ]|
  end

  abstract AList(T)
  begin
    /* AList variables */
    const MAX := 100 : int;

    var   items      : sequence of T;

    {repinv true repinv}


    /* AList procedures */
    proc insert (inout l : AList(T), in x : T)
      {pre  true  pre} 
      {post true post}

    proc print (in l : AList(T))
      {pre  true  pre} 
      {post true post}

    proc freeList (inout l : AList(T))
      {pre  true  pre} 
      {post true post}

    func b (i : AList(T)*) -> boolean
      {pre  true  pre} 
      {post true post}


  end

  type ListO(T) implements AList(T)
  begin
    /* ListO variables */
     var tam := 0 : int;
     var first    : Node(T)*;
     var h        : ListO(T)*;
    
    {repinv b(h) repinv}

    {coupinv first != null 
        ==> (% forall i : int 
               | 0 <= i /\ i < tam-1 
               | items[i] <= items[i+1] 
            %) coupinv}
  
    where { items := << x : int | 0 <= x /\ x < tam /\ first != null | atNode(first,x) >> }
  
    /* ListO procedures */

    func b (i : ListO(T)*) -> boolean
      {pre  true  pre} 
      {post true post}
      |[ true ]|


    proc insert (inout l : ListO(T), in x : T)
      {pre true pre}
      {post elemNode(l.first, x, l.tam) post}
      |[ if l.tam == 0 
            -> new(l.first)
             ; (*l.first).element := x

         [] otherwise  
            -> var aux := l.first : Node(T)*
             ; var i   := 0       : int
             ; {inv true inv}
               {bound l.tam - i bound}
               do i < l.tam 
                -> if (*aux).element >= x 
                    -> var aux2 : Node(T)*
                     ; new(aux2)
                     ; (*aux).element, (*aux2).element := x, (*aux).element
                     ; (*aux2).next, (*aux).next := (*aux).next, aux2
                     ; i := l.tam
                   [] (*aux).next == null 
                    -> var aux2 : Node(T)*
                     ; new(aux2)
                     ; (*aux2).element := x
                     ; (*aux).next     := aux2
                     ; i := l.tam
                   [] otherwise
                    -> aux, i := (*aux).next, i+1
                   fi
               od
          fi
        ; l.tam := l.tam + 1
      ]|

    proc print (in l : ListO(T))
      {pre true pre}
      {post true post}
      |[ var aux := l.first : Node(T)*
       ; var i   := 0       : int
       ; {inv true inv}
         {bound l.tam - i bound}
         do i < l.tam  -> { aux != null }
                        ; writeln((*aux).element)
                        ; aux, i := (*aux).next, i+1
         od
      ]|
     
    proc freeList (inout l : ListO(T))
      {pre true pre}
      {post true post}
      |[ var aux  := l.first : Node(T)*
       ; var next := null    : Node(T)*
       ; var i    := 0       : int
       ; {inv true inv}
         {bound l.tam - i bound}
         do i < l.tam  -> { aux != null }
                        ; next, (*aux).next, i := (*aux).next, null, i+1
                        ; free(aux)
                        ; aux := next
         od
       ; l.first := null
      ]| 
    
    func at (l : ListO(T), pos : int) -> T
      {pre 0 <= pos /\ pos < l.tam pre}
      {post true post}
      |[
        atNode(l.first, pos)
      ]|

  end

  type List(T) implements AList(T)
  begin
    /* List variables */
    var tam := 0 : int;
    var first    : Node(T)*;
    var h : List(T)*;
    

    {repinv 0 <= tam /\ tam <= MAX repinv}
    {coupinv ! b(h) coupinv}

    where { items := <<x : int | 0 <= x /\ x < tam /\ first != null | atNode(first,x)>> }

    func b (i : List(T)*) -> boolean
      {pre  true  pre} 
      {post true post}
      |[ false ]|


    proc insert (inout l : List(T), in x : T)
      {pre true pre}
      {post elemNode(l.first, x, l.tam) post}
      |[ if l.tam == 0 -> new(l.first)
                        ; (*l.first).element := x
         [] otherwise -> var aux := l.first : Node(T)*
                       ; var i   := 0       : int
                       ; {inv true inv}
                         {bound l.tam - i bound}
                         do i < l.tam 
                           -> if (*aux).next == null -> new((*aux).next)
                              [] otherwise -> skip
                              fi
                            ; aux := (*aux).next
                            ; i := i + 1
                         od 
                       ; (*aux).element := x
         fi
       ; l.tam := l.tam + 1 
      ]|
    
    proc print (in l : List(T))
      {pre true pre}
      {post true post}
      |[ var aux := l.first : Node(T)*
       ; var i   := 0       : int
       ; {inv true inv}
         {bound l.tam - i bound}
         do i < l.tam  -> { aux != null }
                        ; writeln((*aux).element)
                        ; aux, i := (*aux).next, i+1
         od
      ]|
    
    proc freeList (inout l : List(T))
      {pre true pre}
      {post true post}
      |[ var aux  := l.first : Node(T)*
       ; var next := null    : Node(T)*
       ; var i    := 0       : int
       ; {inv true inv}
         {bound l.tam - i bound}
         do i < l.tam  -> { aux != null }
                        ; next, (*aux).next, i := (*aux).next, null, i+1
                        ; free(aux)
                        ; aux := next
         od
       ; l.first := null
      ]| 

    func at (l : List(T), pos : int) -> T
      {pre 0 <= pos /\ pos < l.tam pre}
      {post true post}
      |[
        atNode(l.first, pos)
      ]|

  end

  

main
  |[ var l       : List(int)
   ; var lo      : ListO(int)
   ; var s       : Node(int)
   ; var n := 10 : int


   ; {inv true inv}
     {bound n - l.tam bound}
     do l.tam < n ->
       insert(l,l.tam);
     od


   ; insert(lo,99)
   ; insert(lo,5)
   ; insert(lo,-129)
   ; insert(lo,3*6)
   ; insert(lo,122*6+n*5)
   ; insert(lo,-1002)
   // ; writeln("TamaÃ±o: ",(*l).tam)

   ; writeln(elemNode(l.first, 1, l.tam))

   ; writeln("Lista Normal")
   ; print(l)
   ; writeln("Lista Normal -> Elemento 0 y 2: ", at(l,0), ", ", at(l,2))
   ; writeln("Lista Ordenada")
   ; print(lo)
   ; writeln("Lista Ordenada -> Elemento 0 y 2: ", at(lo,0), ", ", at(lo,2))

   ; freeList(l)
   ; freeList(lo)

   ; write(toChar(toFloat(toChar(toInt('c')))))

  ]|
end