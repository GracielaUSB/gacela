Universidad Simón Bolívar
Departamento de Computación y Tecnología de la Información
Proyecto: Implementación de un Compilador Nativo para GCL

#Informe  Étapa I

##Introducción
##Desarrollo

###Investigación Previa
Comenzamos llevando a cabo una investigación previa sobre el lenguaje GCL y en una implantación anterior de un compilador del lenguaje. Ésta fue hecha por un grupo dentro de la Universidad Simón Bolívar.

Con respecto al lenguaje GCL, es un lenguaje desarrollado por Edsger Dijkstra que permitía demostrar la validez de los programas mediante la forma en que afectaban el **estado de las variables** en el programa. El estado de las variables es el conjunto de todos los posibles valores que pueden tomar las variables definidas dentro del programa. Por ejemplo, en un programa con dos variables del tipo entero, tenemos el estado (5, 10) como un estado válido. En total tenemos ℤxℤ posibles estados.

Sobre el estado se definen **aserciones**. Estas aserciones son expresiones lógicas que permiten limitar el conjunto de estados. Usando el ejemplo anterior, sean *X* y *Y* el nombre de dos variables del tipo entero, la asercion *{ X > 0 ∧ Y < 0}* es válida sobre el conjunto de estados.

Cada programa escrito en GCL cuenta con una **precondición** y una **postcondicion**. La precondicion es una aserción sobre el estado del programa **antes** del comienzo de la ejecución. La postcondición es una aserción sobre el estado del programa después de la ejecución. En caso de demostrar la validez del programa, está garantizado que para cualquier estado definidido por la precondición, la ejecución del programa terminará en un estado que satisface la postcondicion.
 
La semántica del lenguaje se expresa en terminos de la **precondición más débil** del programa. La precondición mas débil representa a **todos** los estados para el cual la ejecución de algúna instrucción *S* termina en un estado que satisface una postcondición Q.

Para modificar el estado de las variables se usan **acciones**. Entre las distintas acciones tenemos:

* **Asignación**: La asignación es la única acción que modifica directamente el estado del programa. Permite sustituir el valor de una variable en el estado actual del programa. Se escribe de la siguiente forma:

        {P} x := E {Q} es equivalente a [P => Q(x := E)]
	
	En el estado *P* se sustituye el valor de la variable *X* por el valor de la expresión *E*.

Con respecto a la precondición más débil:

		wp(S)
* **Concatenación**: La concatenación de acciones permite construir una acción más grande a partir de otras más pequeñas. Sean, *S* y *T* acciones, podemos escribir la concatenación de la siguiente forma:

        {P} S ; T {Q} es equivalente a existe un estado R, tal que
        {P} S {R} y {R} T {Q}

	El *';'* se usa como **separador** de acciones.

* **Abort**:

* **Skip**: La ejecución de esta acción no tiene efecto alguno en el programa. Es útil para cuando en ciertas condiciones explícitamente no se debe hacer nada. Por ejemplo, si tenemos un programa en el que queremos sumar un valor solo en el caso que una variable sea negativa, podemos escribir el siguiente programa:
    
	
		if  (x < 0) -> x = x + 10;
		[] (x >= 0) -> skip;
		fi

###Desarrollo Técnico
###Próximos Pasos
##Conclusión