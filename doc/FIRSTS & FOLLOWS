
First



PROGRAMA         first  --- program
		         follow --- $


ListDEF          first  --- func, proc, %empty
                 follow --- ], {a, skip, if, inv, |, abort, random, write, writeln, TK_ID


PROCEDIMIENTO    first  --- func, proc
                 follow --- func, proc, ], {a, skip, if, inv, |, abort, random, write, writeln, TK_ID


BOUND            first  --- {, %empty
			     follow --- |


ListARG_FUNC     first  --- TK_ID, %empty 
			     follow --- )


ListARG_FUNCaux  first  --- ",", %empty 
			     follow --- )


ListARG_PROC     first  --- in, out, inout, %empty 
			     follow --- )


ListARG_PROCaux  first  --- ",", %empty 
			     follow --- )


ARG              first  --- in, out, inout 
			     follow --- ), "," 

 
DECLARACIONES    first  --- var, const, %empty 
			     follow --- {pre


READ		     first  --- read, %empty 
			     follow --- {pre	     


WITH             first  --- with, %empty 
			     follow --- ;	


ListReadID       first  --- TK_ID, %empty 
			     follow --- with, ;	


ListReadIDaux    first  --- ",", %empty 
			     follow --- with, ;	


ListDECLA        first  --- var, const, %empty 
			     follow --- read, {pre, ], {a, skip, if, inv, |, abort, random, write, writeln, TK_ID


ListDECLAvar     first  --- TK_ID
			     follow --- :

  
ListID           first  --- TK_ID
			     follow --- :, :=, ], of, ), ;, [, ->, ], ",", ^, *, /, max, min, mod, gcd, +, -, <, <=, =, >, >=, 
			                !=, /\, \/, ==>, <==, ==, !, pre}, post}, a}, bound}, inv}, [], fi, od


ListIDaux        first  ---  ",", %empty
			     follow --- :, :=, ], of, ), ;, [, ->, ], ",", ^, *, /, max, min, mod, gcd, +, -, <, <=, =, >, >=, 
			                !=, /\, \/, ==>, <==, ==, !, pre}, post}, a}, bound}, inv}, [], fi, od


ListASIG         first  --- TK_ID
			     follow --- : 


ListASIGaux		 first  --- ",", %empty 
			     follow --- :  	     


CuerpoFUN        first  --- |
			     follow --- func, proc, {a, skip, if, inv, |, abort, random, write, writeln, TK_ID, ] 


BLOQUE           first  ---  {a, skip, if, inv, |, abort, random, write, writeln, TK_ID, var, const, %empty 
			     follow ---  ]

  
ListACC          first  --- {a, skip, if, inv, |, abort, random, write, writeln, TK_ID, %empty
			     follow --- ]


ListACCaux       first  --- {a, skip, if, inv, |, abort, random, write, writeln, TK_ID, %empty
			     follow --- {a, skip, if, inv, |, abort, random, write, writeln, TK_ID


ASERCION         first  --- {a, skip, if, inv, |, abort, random, write, writeln, TK_ID 
			     follow --- ],  ;


ACCION           first  --- skip, if, inv, |, abort, random, write, writeln, TK_ID 
			     follow --- [], if, od, ], ;


FUNC_ARG         first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if, %empty 
			     follow --- )


ListGUARD        first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if
			     follow --- fi, od
   

ListGUARDaux     first  --- [], %empty
			     follow --- fi, od


GUARD            first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if
			     follow --- [], fi, od


EXPRESION_P      first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if
			     follow --- pre}, post}, a}, bound}, inv}, )



EXPRESION_Paux   first  --- /\, \/, ==>, <==, ==, !, %empty
			     follow --- pre}, post}, a}, bound}, inv}, )



EXPRESION_BOOL_P first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if
			     follow --- /\, \/, ==>, <==, ==, !, pre}, post}, a}, bound}, inv}, )


EXPRESION_BOOL_Paux first  --- forall, exist, max, min, sigma, pi, union,
							   TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                               tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                               toChar, toString, abs, sqrt, length, if
			        follow --- )


OpBIN            first  --- ^, *, /, max, min, mod, gcd, +, -, <, <=, =, >, >=, !=
			     follow --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if


OpBOOL           first  --- /\, \/, ==>, <==, ==, !
			     follow --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if


OpMAT            first  --- *, /, max, min, mod, +, -, <, <=, =, >, >=
			     follow --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if


OpCUANT          first  --- forall, exist, max, min, sigma, pi, union  
			     follow --- TK_ID



ListEXPRESION    first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if
			     follow --- )


ListEXPRESIONaux first  --- ",", %empty
			     follow --- )


EXPRESION        first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if
			     follow --- ), ->, ], ",", ^, *, /, max, min, mod, gcd, +, -, <, <=, =, >, >=, 
			                !=, /\, \/, ==>, <==, ==, !, pre}, post}, a}, bound}, inv}, [], fi
 
							
EXPRESIONaux     first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if
			     follow --- ), ->, ], ",", ^, *, /, max, min, mod, gcd, +, -, <, <=, =, >, >=, 
			                !=, /\, \/, ==>, <==, ==, !, pre}, post}, a}, bound}, inv}, [], fi


EXPRESIONtokeid  first  --- (, [, %empty 
			     follow --- ), ->, ], ",", ^, *, /, max, min, mod, gcd, +, -, <, <=, =, >, >=, 
			                !=, /\, \/, ==>, <==, ==, !, pre}, post}, a}, bound}, inv}, [], fi


EXPRESIONop      first  --- ^, *, /, max, min, mod, gcd, +, -, <, <=, =, >, >=, 
                            !=, /\, \/, ==>, <==, ==, !, empty
			     follow --- ), ->, ], ",", ^, *, /, max, min, mod, gcd, +, -, <, <=, =, >, >=, 
			                !=, /\, \/, ==>, <==, ==, !, pre}, post}, a}, bound}, inv}, [], fi
         

ListGUARD_EXP    first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if
			     follow --- fi


ListGUARD_EXPaux first  --- [], %empty
			     follow --- fi


GUARD_EXP        first  --- TK_ID, -, (, !, MIN_INT, MIN_DOUBLE, MAX_INT, MAX_DOUBLE, [, 
                            tokenBOOL, tokenINT, tokenCHAR, tokenSTRING, toInt, toDouble, 
                            toChar, toString, abs, sqrt, length, if
			     follow --- [], fi


TIPO             first  --- array, boolean, int, double, char, string
			     follow --- {, |, ",", ), ;


ListAc_ARREGLO   first  --- [, %empty
			     follow --- :=, ],of, ), ->, ], ",", ^, *, /, max, min, mod, gcd, +, -, <, <=, =, >, >=, 
			                !=, /\, \/, ==>, <==, ==, !, pre}, post}, a}, bound}, inv}, [], fi


TIPO_BASICO      first  --- boolean, int, double, char, string
			     follow --- {, |, ",", ), ;