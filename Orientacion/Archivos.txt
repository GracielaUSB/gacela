Funcion de cada uno de los archivos.

auxiliarFunctions.c = Libreria utilizada para las llamadas al sistema, para imprimir los 
                      errores a momento de ejecucion y realizar las lecturas de variables
                      ya sea de archivos o de la entrada estandar. 

Aborts       = Utilizado para el codigo intermedio del LLVM, se encarga de generar
			   las etiquetas para realizar los saltos en caso de un error a momemto de ejecucion.

AST          = Tipo de datos para la representacion del arbol sintactico.

ASTtype      = Recorrido del arbol para la verificacion de tipos de todos los nodos,
			   tambien posee la creacion de los rangos para los cuantificadores.

Codegen      = Genera el codigo intermedio para el LLVM de cada uno de los nodos del arbol.

CodegenState = Monad de estado utilizado para ir generando el codigo intermedio del LLVM, 
			   definir funciones para el LLVM, etiquetas para los saltos, etc.

Contents     = Tipo de datos usado como contenido de la tabla de simbolos,
			   si es una variable, una funcion o un procedimiento 
			   (Depende de lo que sea, se guardan diferente informacion).

Declarations = Parseo de las declaraciones y almacenamiento de variables 
               y constantes en la tabla de simbolos.

Expression   = Analizador sintactico de todas las expresiones posibles.

Lexer        = Analizador lexicografico.

Limits       = Limites establecidos para los enteros y los flotantes del lenguaje.

Location     = Todo lo referente a la localizacion de variables, errores, etc.

Main		 = Programa principal, se realiza la lectura de parametros de entrada,
			   los ajustes de arquitectura y los prints de las listas de errores.

Makefile     = Makefile, para compilar con el comando make, tambien posee un make clean.

MyParseError = Tipo de datos para los errores ocurridos en el analizador sintactico.

MyTypeError  = Tipo de datos para los errores ocurridos en las verificaciones de tipos.

Parser 		 = Analizador sintactico de la mayor parte del lenguaje, instrucciones, funciones
			   procedimientos, aserciones, entre otras.

ParserError  = Utilizado para leer tokens al momento de encontrar un error,
               y poder realizar la recuperacion de errores.

ParserState  = Utilizado para guardar los errores, los datos en la tabla, 
			   cambiar de scope en la tabla, entre otras cosas.

ParserType   = Analizador sintactico de los tipos del lenguaje

ReduceAST    = Recorta partes del AST cuando las operaciones son obvias, una suma de constantes, etc.

State        = Monad utilizado para guardar: Los errores de parseo, la tabla de simbolos,
			   los errores de tipo y los nombres de los archivos para las lecturas.

SymbolTable  = Tabla de simbolos del compilador.

Token        = Los tokens generados por el lexer.

TokenParser  = Analizador sintactico para las palabras reservadas del lenguaje.

Type         = Tipos utilizados dentro del compilador.

TypeState    = Funciones para crear las instancias de errores que seran guardados en el estado.

VerTypes     = Realiza todas las verificaciones de tipos necesarias, entre ellos tambien estan los
			   errores que tienen que ver con los identificadores, procedimiento no declarado, 
			   numero de argumentos incorrecto, entre otros. 

