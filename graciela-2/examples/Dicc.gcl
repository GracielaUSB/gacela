
type Dicc implements Diccionario (int, char) begin
    const MAX : int
    ref clave : array [MAX] of int
    ref valor : array [MAX] of char
    tam : int

    {repinv MAX > 0 /\ 0<=tam<=MAX  /\ 
        (%forall i : int | 0 <= i <= tam 
          | (%forall j : int | 0 <= j <= tam /\ i != j
              | clave[i] != clave[j]
            %)
        %)
    repinv}

    {acinv  conoc == {i : 0<=i<=tam : clave[i]} /\
            table == {i : 0<=i<=tam : (clave,valor[i])}
    acinv}

    proc buscar: ( in d : Diccionario , in c : T0 , out v : T1 ) 

    int x : int;
    {pre (%exists i | 0<=i<=d.tam | d.clave[i] == c) pre}
    |[
        x := 0;
        {inv 0 <= x /\ (%forall j: int | 0 <= j <= x | %) inv}
        {bound tam - x bound}

        do (clave[x] != c) -> x := x+1 od

        v := valor[x]
    ]|
    {post (%exists i | 0<=i<= d.tam | d.table(i) == v %) post}
end


proc hola (Dicc d )