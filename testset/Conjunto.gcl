
/*% LANGUAGE EnableTrace %*/
/*% LANGUAGE LogicAnywhere %*/
program Conjunto.bin begin
  
  abstract ConjuntoA(T) begin
    const MAX := 100 : int;
    var   contenido  : set of T;
    
    {repinv MAX > 0 ∧ #contenido <= MAX repinv}

    proc agregar (inout c : ConjuntoA(T), in x : T )
      let contenido' := c.contenido : set of T;
      {pre  x ∈ c.contenido ==> #c.contenido < c.MAX pre} 
      {post c.contenido == contenido' ∪ {x} post}
    
    proc eliminar ( inout c : ConjuntoA(T), in x : T ) 
      let contenido' := c.contenido : set of T;
      {pre x ∈ c.contenido pre}
      {post c.contenido == contenido' \ {x} post}
    
    proc extraer (in c : ConjuntoA(T), out x : T ) 
      {pre c.contenido != ∅ pre}
      {post x ∈ c.contenido post}
    
    proc pertenece (in c : ConjuntoA(T), in x : T, out p : boolean) 
      {pre true pre}
      {post p ≡ x ∈ c.contenido post}
    
    proc vacio ( in c : ConjuntoA(T), out v : boolean) 
      {pre true pre}
      {post v ≡ (c.contenido == ∅) post}
    
    proc unir( in c0 : ConjuntoA(T)
             , in c1 : ConjuntoA(T)
             , out c : ConjuntoA(T))
      {pre #c0.contenido + #c1.contenido <= c0.MAX pre}
      {post c0.contenido ∪  c1.contenido == c.contenido post}
    
    proc intersectar( in c0 : ConjuntoA(T)
                    , in c1 : ConjuntoA(T)
                    , out c : ConjuntoA(T))
      {pre #c0.contenido <= c0.MAX ∧ #c1.contenido <= c0.MAX pre}
      {post c.contenido == c0.contenido ∩ c1.contenido post}
    
    proc restar( in c0 : ConjuntoA(T)
               , in c1 : ConjuntoA(T)
               , out c : ConjuntoA(T))
      {pre #c0.contenido <= c0.MAX pre}
      {post c.contenido == c0.contenido \ c1.contenido post}

  end

  type Conjunto(T) implements ConjuntoA(T) begin
    var   elems      : array[MAX] of T;
    var   tam        : int;
    
    {repinv MAX > 0 ∧ 0 <= tam ∧ tam <= MAX ∧ 
              (%∀ i : int | 0 <= i ∧ i < tam | 
                (% ∀ j : int | 0 <= j ∧ j < tam | 
                  i != j ==> elems[i] != elems[j]%) %) repinv}

    {coupinv true coupinv}

    where { contenido := {i : int | 0 <= i ∧ i < tam | elems[i]} }

    proc copiarElems(in c : Conjunto(T), const m : int, out elems' : array[m] of T)
      {pre m > 0 pre}
      {post (% forall i : int | 0 <= i /\ i < c.tam | c.elems[i] == elems'[i] %) post}
      |[ var i := 0 : int
       ; {inv true inv}
         {bound c.tam - i bound}
         do i < c.tam -> elems'[i], i := c.elems[i], i+1 od
      ]|
    proc mostrar(in c : Conjunto(T))  
      {pre true pre}
      {post true post}
      |[ var i := 0 : int
       ; if c.tam == 0 -> writeln("∅")
         [] otherwise
          -> write("{")
           ; {inv true inv}
             {bound c.tam - i bound}
             do i < c.tam -> write(c.elems[i])
                           ; write(if i != c.tam-1 -> "," [] otherwise -> "" fi)
                           ; i:= i+1 
             od
           ; writeln("}")
         fi
      ]|

    proc agregar (inout c : Conjunto(T),  in x : T)
      var tam' := c.tam : int;
      var elems'        : array[c.MAX] of T;
      {pre ¬ (% ∃ i : int | 0 <=  i ∧ i < c.tam | c.elems[i] == x %) ==> c.tam < c.MAX pre} 
      
      {post ((% ∃ i : int | 0 <=  i ∧ i < tam' | elems'[i] == x %) ==> 
                  c.tam == tam' 
                ∧ (% ∀ j : int | 0 <= j ∧ j < c.tam | c.elems[j] == elems'[j] %)) 
          ∧ 
            (¬(%∃ i : int | 0 <= i ∧ i < tam' | elems'[i] == x %) ==>
                  c.tam == tam' + 1
                ∧ (% ∀ j : int | 0 <= j ∧ j < tam' | c.elems[j] == elems'[j] %)
                ∧ c.elems[tam'] == x)
      post}
      |[ var i := 0 : int
       ; copiarElems(c, c.MAX, elems')
       ; if c.tam == 0 -> c.tam, c.elems[0] := c.tam + 1, x
         [] otherwise  
            -> {inv true inv}
               {bound c.tam - i bound}
               do i < c.tam 
                  -> if c.elems[i] == x -> i := c.tam
                     [] i == c.tam-1    -> c.elems[i+1] := x
                                         ; c.tam := c.tam+1
                                         ; i     := c.tam
                     [] otherwise       -> i := i + 1
                     fi
               od
         fi
      ]|

    proc eliminar (inout c : Conjunto(T),  in x : T )
      var tam' := c.tam : int;
      var elems'        : array[c.MAX] of T;
      {pre    (% ∃ i : int | 0 <= i ∧ i < c.tam | c.elems[i] == x %) pre}
      {post (¬(% ∃ i : int | 0 <= i ∧ i < tam' | elems'[i] == x %) ==>
                c.tam == tam'
              ∧ (% ∀ j : int | 0 <= j ∧ j < c.tam | c.elems[j] == elems'[j] %))
          ∧ 
            ( (% ∃ i : int | 0 <= i ∧ i < tam' | elems'[i] == x %) ==>
                c.tam == tam' - 1 
              ∧ (% ∃ i : int | 0 <= i ∧ i < tam' | 
                    elems'[i] == x  ∧ c.elems[i] == elems'[tam'-1]  
                  ∧ (% ∀ j : int | 0 <= j ∧ j < tam'-1 ∧ j != i | c.elems[j] == elems'[j] %)
                %))
      post}
      |[ var i := 0 : int
       ; copiarElems(c, c.MAX, elems')
       ; if c.tam == 0 -> c.tam, c.elems[0] := c.tam + 1, x
         [] otherwise  
            -> {inv true inv}
               {bound c.tam - i bound}
               do i < c.tam 
                  -> if c.elems[i] == x -> c.elems[i] := c.elems[c.tam-1]
                                         ; c.tam := c.tam -1
                                         ; i := c.tam
                     [] otherwise       -> i := i + 1
                     fi
               od
         fi
      ]|

    proc extraer (in c : Conjunto(T),  out x : T )
      {pre c.tam > 0 pre}
      {post (% ∃i : int | 0 <= i ∧ i < c.tam | c.elems[i] == x %) post}
      |[
        skip
      ]|

    proc pertenece (in c : Conjunto(T),  in x : T,  out p : boolean) 
      {pre true pre}
      {post p ≡ (% ∃ i : int | 0 <= i ∧ i < c.tam | c.elems[i] == x %) post}
      |[ var i := 0 : int
       ; p := false
       ; {inv i <= c.tam inv}
         {bound c.tam - i bound}
         do i < c.tam /\ ¬p -> if c.elems[i] == x -> p := true
                               [] otherwise       -> skip
                               fi
                             ; i := i + 1 
         od
      ]|

    proc vacio ( in c : Conjunto(T),  out v : boolean ) 
      {pre true pre}
      {post v ≡ c.tam == 0 post}
      |[
        v := c.tam == 0
      ]|

    proc unir(in c0 : Conjunto(T), in c1 : Conjunto(T), out c : Conjunto(T)) 
      {pre c0.tam + c1.tam <= c0.MAX pre}
      {post {i : int | 0 <= i ∧ i < c.tam | c.elems[i]} ==
                {i : int | 0 <= i ∧ i < c0.tam | c0.elems[i]}
              ∪ {i : int | 0 <= i ∧ i < c1.tam | c1.elems[i]} 
      post}
      |[ var i := 0 : int
       ; {inv true inv}
         {bound c0.tam - i bound}
         do i < c0.tam -> agregar(c, c0.elems[i]); i := i + 1 od
       ; i := 0
       ; {inv true inv}
         {bound c1.tam - i bound}
         do i < c1.tam -> agregar(c, c1.elems[i]); i := i + 1 od
      ]|

    proc intersectar(in c0 : Conjunto(T), in c1 : Conjunto(T), out c : Conjunto(T))  
      {pre  c0.tam <= c0.MAX ∧ c1.tam <= c0.MAX pre}
      {post {i : int | 0 <= i ∧ i < c.tam | trace(c.elems[i])} ==
                {i : int | 0 <= i ∧ i < c0.tam | trace(c0.elems[i])}
              intersect {i : int | 0 <= i ∧ i < c1.tam | trace(c1.elems[i])} 
      post}
      |[ var i, j := 0, 0 : int
       ; {inv true inv}
         {bound c0.tam - i bound}
         do i < c0.tam 
          -> {inv true inv}
             {bound c1.tam - j bound}
             do j < c1.tam 
              -> if c0.elems[i] == c1.elems[j] -> agregar(c, c0.elems[i])
                                                ; j := c1.tam - 1
                 [] otherwise -> skip
                 fi
               ; j := j + 1 
             od
           ; i, j := i + 1, 0
         od 
      ]|

    proc restar(in c0 : Conjunto(T), in c1 : Conjunto(T), out c : Conjunto(T)) 
      {pre c0.tam  <= c0.MAX pre}
      {post {i : int | 0 <= i ∧ i < c.tam | c.elems[i]} ==
                {i : int | 0 <= i ∧ i < c0.tam | c0.elems[i]}
              \ {i : int | 0 <= i ∧ i < c1.tam | c1.elems[i]} 
      post}
      |[ var i := 0 : int
       ; {inv true inv}
         {bound c0.tam - i bound}
         do i < c0.tam -> agregar(c, c0.elems[i]); i := i + 1 od
       ; i := 0
       ; {inv true inv}
         {bound c1.tam - i bound}
         do i < c1.tam -> eliminar(c, c1.elems[i]); i := i + 1 od
      ]|


    

  end

proc readSet(out con : Conjunto(int), out ok : boolean)
  {pre  true  pre}
  {post true post}
  |[ var i,n := 0,0 : int
   ; var c : char
   ; var b := false : boolean
   ; read(c)
   ; if c == '{' 
      -> {inv true inv}
         {bound 100 - i bound}
         do i < 100 
          -> read(c)
           ; if c == ',' -> agregar(con, n); n := 0
             [] c == '}' 
              -> if b -> agregar(con, n);
                 [] otherwise -> skip
                 fi
               ; ok,i := true,99 
             [] c >= '0' /\ c <= '9' -> b,n := true, n*10 + (toInt(c)-48)
             [] otherwise -> writeln("Error"); ok,i := false,99
             fi
           ; i := i+1
         od
     [] otherwise -> writeln("Error"); ok,i := false,9
     fi

  ]|

main
  |[ var n, k := 0,0 : int
  ; var v, c : char
  ; var cond := true : boolean
  ; var arr : array[10] of (int*)
  ; var c1,c2 : Conjunto(int)

  ; writeln("Debido a que el programa debe tenerminar,")
  ; writeln("este prompt se emitira solo un maximo de 100 veces")
  ; {inv   true    inv}
    {bound 100-n bound}
    do n < 100 /\ cond
      -> n := n + 1
       ; writeln("(Intento: ", n, " de 100)")
       ; writeln( "Introduzca una letra:")
       ; writeln("\t(T) para Terminar")
       ; writeln("\t(A) para Agregar un elemento al conjunto")
       ; writeln("\t(E) para Eliminar un elemento del conjunto")
       ; writeln("\t(P) para mostrar si un elemento Pertenece al conjunto")
       ; writeln("\t(U) para Unir un Conjunto")
       ; writeln("\t(I) para Intersectar un Conjunto")
       ; writeln("\t(R) para Restar un Conjunto")
       ; writeln("\t(M) para Mostrar el Conjunto")
       ; write("> ")
       ; read(c)
       ; write("\n")
       ; if c == 'T' \/ c == 't' -> writeln("Adios :)"); n := 100
         [] c == 'A' \/ c == 'a'
          -> write("Escriba la valor a insertar (entero): ")
           ; read(k)
           ; agregar ( c1, k )
         [] c == 'U' \/ c == 'u'
          -> write("Escriba un conjunto de enteros: ")
           ; readSet(c2,cond)
           ; if cond -> unir(c1,c2,c1)
             [] otherwise -> skip
             fi
         [] c == 'I' \/ c == 'i'
          -> write("Escriba un conjunto de enteros: ")
           ; readSet(c2,cond)
           ; if cond -> intersectar(c1,c2,c1)
             [] otherwise -> skip
             fi
         [] c == 'R' \/ c == 'r'
          -> write("Escriba un conjunto de enteros: ")
           ; readSet(c2,cond)
           ; if cond -> restar(c1,c2,c1)
             [] otherwise -> skip
             fi
         [] c == 'M' \/ c == 'm' -> mostrar(c1)
         [] c == 'E' \/ c == 'e' 
          -> write("Escriba la valor a eliminar (entero): ")
           ; read(k)
           ; eliminar ( c1, k )
         [] c == 'P' \/ c == 'p' 
          -> var b : boolean
           ; write("Escriba la valor a buscar (entero): ")
           ; read(k)
           ; pertenece ( c1, k, b )
           ; write("El elemento ", k)
           ; if b         -> writeln(" si pertenece")
             [] otherwise -> writeln(" no pertenece")
             fi
         [] otherwise -> writeln("Has perdido un intento :(")
         fi
        ; write("\n")
        ; c2.tam := 1
       
    od
  ]|
end